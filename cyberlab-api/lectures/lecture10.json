{
    "lecture_id": 2,
    "lecture_name": "lecture10",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nExam 1 Summary, Arrays, & \nOverview of Methods\nFebruary 22, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Review the test statistics\n- Thoughts on exam\n- Lessons for exam 2\n- Assignments for next two weeks\n- You get an extension on Assignment 5 and Coding Assignment 2\n- Classes for next week\n- No lab next week - Lab Project 1 will be released.  There will be a recording.\n- No class on Thursday, February 29.  Dr. Del Vecchio at an NSF conference.\n- Today - Arrays\n- Tuesday - User-defined methods\n- The building blocks for object oriented programming\n- First Week of March - Object Oriented programming - we are headed there!\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nExam 1 Statistics\nViewable to student on D2L\n4\n● Worth 12% of final grade\n● The questions mainly focused on the basic knowledge of \nthe programming language.\n● From an interview perspective\n○ You would just be asked questions like 1-43 during an \ninterview by technical folks.\n○ You would certainly be required to develop a solution \nto a problem as well - like the last one.\n○ Take a look at leetcode.\n● Two folks did well on the supplemental question!\n○ Glad I did not make that an exam question\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is NSF?\nNSF - National \nScience Foundation\n5\n\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nArrays\n6\nHave a type Have a size\nAccessed by index \nstarting at zero\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nPython Includes Arrays\nIn Python, you can create arrays of any type using the array module. \nYou specify the data type of the array when creating it.\nfrom array import array\nint_array = array('i', [122, 119, 117])\nBut it is not used as much as Lists.\nOne of my biggest hangups moving from Java/C to Python.\n7\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nArrays - One of the Oldest (and Fundamental) Data Structures\nFortran (1957): Fortran (short for Formula Translation) is one of the earliest high-\nlevel programming languages. It introduced the concept of arrays as a built-in \ndata type. Fortran's array syntax allowed programmers to define arrays with \nspecific dimensions and access elements using subscript notation.\nArrays provide a way to store multiple values of the same type under a single \nidentifier, allowing for efficient access and manipulation of elements.\nOnce you know the absolute size of something (it will not get larger or smaller) \nand you know its type (int, double, etc.), the compiler can optimize how it uses that \nthing.\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat Types of Things Can an Array Be?\nIs it just limited to the primitives?\nint, double, boolean, etc?\nNo, an array can be any conceivable primitive or object type.  In fact, \nit can be an array of arrays (more on that later!)\nGo to Week Six In Class Lab.\nLook at examineEmptySizeArray\n9\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAre arrays[] an Object?\nYes, it is!  Let’s look at areArraysAnObject\nLet’s look at the Java specification as well (not the Java API) \n10\n\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHow Large or Small Can They Be\nInteresting note on how small they can be.  Look at \nexamineEmptySizeArray\nA in-class task for you.  Write a looping construct that has your \nJava application run out of memory.  Use the method \nrunOutOfMemoryChallenge\nYou should see this error: \nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat Is In An Array when It’s Created With No Values\nSay I have an:\nint[] intArray = new int[10];\nAnd\nString[] stringArray = new String[10];\nHow are they different?\nLet’s look at: unitializedPrimitiveArrays and unitializedObjectArray\n12\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSo You Know - java.array.Utils Is Useful\nIt contains lots of manipulation methods for arrays!  Coding \nchallenge - create and sort an array of ints.\n13\n\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nDifferent Styles to Initialize Arrays\nIt can be annoying. For example:\nException ae[]  = new Exception[3];\nint[] factorial = { 1, 1, 2, 6, 24, 120, 720, 5040 };\nchar ac[]       = { 'n', 'o', 't', ' ', 'a', ' ',\n'S', 't', 'r', 'i', 'n', 'g' };\nString[] aas    = { \"array\", \"of\", \"String\", };\n14\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nArray Exceptions\n15\nYou probably saw this \nwith accessing the \nString[] args of the main \nmethod.  People do \nworry about this.\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTwo Dimensional Arrays\n16\n\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Dimensions of An Array As Big As Needed\nLet’s take a look at TemperatureAnalysis.java\nIn this scenario, a four -dimensional array is used to store the temperature measurements. \nHere's how the dimensions could be interpreted:\nTime Dimension: Represents different time intervals or timestamps when temperature \nmeasurements were taken.\nLatitude Dimension : Represents different latitudinal positions on the Earth's surface.\nLongitude Dimension : Represents different longitudinal positions on the Earth's surface.\nTemperature Dimension : Represents the temperature measurements recorded at each \ntime, latitude, and longitude combination.\nWe will try to run it … something bad will happen.\n17\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTwo Dimensional Array\n18\n* Image from: \nhttps://math.hws.edu/eck/cs124/javanotes7/c7/s5.html\n\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nEnhanced For Loop\n19\n\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAs a Programmer - You Always Need to Stay Current!\nLook at this page.  It is from 2005.\n20\n\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nEnhanced For Loop Comparison\n21\n\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGentle Introduction to Object Oriented Programming \nThe vocabulary:\n22\ninstanceType Object Template\nCreated by a:\nconstructor() \nSize of ArrayList\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nArrayList and arrays Compared\nDifferences:\nDynamic Size:\n● ArrayList: Automatically resizes itself when elements are added or removed. It dynamically grows and \nshrinks as needed.\n● Array: Has a fixed size determined at the time of creation. Once created, the size cannot be changed.\nData Type:\n● ArrayList: Can only store objects (reference types), not primitive types directly. However, Java autoboxing \nallows you to use primitive types as if they were objects.\n● Array: Can store both primitive types and objects directly.\nUnderlying Data Structure:\n● ArrayList: Internally uses an array to store elements. It dynamically resizes this array as needed.\n● Array: Represents a fixed-size sequential collection of elements of the same type.\nPerformance:\n● ArrayList: Provides dynamic resizing, which allows for efficient insertion and deletion of elements. However, \nperformance may degrade when resizing becomes frequent, especially for large ArrayLists.\n● Array: Offers constant-time access to elements since it uses direct indexing. Insertion and deletion \noperations can be less efficient, especially if elements need to be shifted.\n23\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nArrayList and arrays Compared\nSimilarities:\nAccess by Index:\n● Both ArrayList and array allow access to elements by index using square brackets ([]) notation.\nIteration:\n● Both ArrayList and array can be iterated over using loops, such as the traditional forloop or the \nenhanced for loop (for-eachloop).\nMutability:\n● Both ArrayList and array allow modification of elements after creation. You can change the value of \nelements at specific indices.\nCollections API:\n● ArrayList is part of the Java Collections Framework, which provides a common interface for \nworking with collections of objects. Arrays, while not part of this framework, are often used in \nconjunction with other collection classes.\n24\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTiming and Heap Example Using an ArrayList\n25\nSomething as simple as this \ncan instruct a great deal about:\n1. Timing\n2. Heap (or memory) usage\nInsertionTimingExample.java\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture10.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCopying Arrays\nIt can get odd.  Assignment has a different effect that a \ncopy:\n26\n\n--------------------------------------------------\n"
}