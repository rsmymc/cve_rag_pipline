{
    "lecture_id": 5,
    "lecture_name": "lecture13",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Object \nOriented Programming\nMarch 7, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Today - More object oriented programming!\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management\nReading Assignment 6\n6/22 - done! \n10/22 - started!\n5/22 - not started.\n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAnyone Taken a Peek at Lab Project One\nAny thoughts on Project One?  How is it coming?\nThere was one issue some students kindly brought to my \nattention!\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWho Remembers Dictionaries from Python\nDictionaries (called hash maps in other languages) are \nreally useful. You will use them all the time if you are a \nprogrammer.\n6\n\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nObjects are Like a Dictionary\nObject as a Dictionary:\n● Just like a dictionary stores words and their corresponding definitions, an object in Java stores data \n(variables) and behavior (methods) together.\n● The object acts as a container that holds a collection of key-value pairs, where the keys represent \nthe names of variables and methods, and the values represent the actual data stored in the \nvariables or the code executed by the methods.\nKeys and Values:\n● In the dictionary analogy, the keys correspond to the names of variables and methods defined in the \nclass, while the values correspond to the data stored in the variables or the functionality provided by \nthe methods.\n● For example, if we have a Personclass, the object representing a person could have keys like \n\"name\", \"age\", and \"sayHello()\", with corresponding values such as \"John\", 25, and a method that \nprints \"Hello!\". 7\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nYou Can Think of an Object Like a Dictionary  \n8\nPerson: p2\nname Bob\nage 54\nsayHello() System.out.println(“Hello!”);\nSystem.out.println(“My name is: ” + name);\nPerson: p1.\nname Mika\nage 22\nsayHello() System.out.println(“Hello!”);\nSystem.out.println(“My name is: ” + name);\nObjects are like mini-\ndictionaries and you just \naccessing the entries.\nPerson p1 = new Person(“Mika”, 22);\nSystem.out.println(pi.name);\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLook At PersonDictionary.java in the In Class Lab\nIts an object oriented programming approach that basically \nemploys arrays!\nThis is actually a rough, rough comparison to how an object \nis stored in RAM and accesses as you call code.\n9\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nYou Find Information and Sometimes Its Updated\nAccessing Information:\n● Just like you can look up words in a dictionary to find their definitions, you can access data \nand behavior stored in an object by using the corresponding keys (variable names or method \nnames).\n● For example, you can retrieve the value of a variable by specifying its name as a key, or you can \ninvoke a method by specifying its name as a key and providing any required arguments.\nDynamic Nature:\n● Objects can dynamically change and evolve, similar to how dictionaries can be updated with \nnew words and definitions.\n● You can add new variables and methods to an object at runtime, modify existing values, or \nremove keys altogether.\n10\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIn Class Task\nLet’s turn this into a better behaved object - one that is \neasier to use and extensible.\nYou get 10 minutes to translate this into an object with \nlogically named methods and distinct class variables (that \nis, not Objects stuffed in an array).\nBe sure to use the correct return types!  \n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat Are Class Variables - What is this Private Stuff?\nWhat do these fellows do?\n12\nThese are the class \nvariables.\nThese modify them.  \nThey are called \nmutators.\nWhat is their purpose?  To maintain … \n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nVisibility of Variables\nRequirement: If a GroceryItem \nis added to a GroceryBill, once \nadded, the GroceryItem cannot \nbe changed.\nThen why is this code \ndangerous?\n13\n\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nVisibility\nThese are difficult to find sometimes!\n14\n\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTest Driven Development & Object Oriented Programming\nThey go hand in hand.\nWe are going to re-inforce yesterday’s lab.\n15\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTest Driven Development\nYou are about to do test driven development.  No better time to start \nthen now! Lab Project One was developed like this - it really was!  Each \ntime a test was created first.\n• One of the most popular and effective uses of automated tests are \nwhen they combined with the practice of Test-Driven Development.\n• Test-Driven Development (TDD) is a practice in software engineering \nwhere developers write their tests first, to define functionality of \nknown components.\n• The thought process is that if you know how you want something to \nbehave, you can define that behavior and prove its working before the \ncode is written\n16\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWriting unit tests\n• Unit tests are written to handle:\noThe best-case scenario\noThe average-case scenario\noThe worst-case scenario\n• If a function you are testing throws an error, you should be \ntesting conditions in which that error is thrown. \n• Tests should account for as many known “cases” as \npossible.\n17\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nConsider this code snippet\n• Loop through each character in the word and print out \nthe number in the array and the character. \n18\npublic static void printLetters(String str){\nfor (int i = 0; i < str.length(); i++) {\nSystem.out.println(str.charAt(i));\n}\n}\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nConsider this code snippet\n• For example: If I put in “Hello!”, I should \nexpect:\no0: H\n1: e\n2: l\n3: l\n4: o\n5: !\n• The question becomes: How do we test this?\n19\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWriting unit tests\n• Best-case scenario\noThe best-case scenario for this code snippet is an input string \nmade of lower-case English characters.\n• Average-case scenarios\noTesting with mixed case (capital / lower) characters, spaces, \nnon-English characters, \n• Worse-case scenarios\noEmpty input, null input, numbers as input, a Boolean as input.\n20\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe pyramid of automated testing \n• Only testing a single method or class?\noThis is a unit test. Unit tests test a single component in \nisolation. They are the easiest and cheapest to write.\n• Testing multiple classes / scripts tied together in a single \nsoftware component / project / code artifact?\noThis is an integration test. Integration tests test a full \ncomponent and their “integration” points.\n• Testing a whole software suite? Frontend / backend / \ndatabase all together?\noThis is a full system test or an end-to-end test. \n21\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTesting Definitions\n• Unit Testing: Testing individual components or modules of \nthe software to ensure they work as expected.\n• Integration Testing: Testing how different components of \nthe software interact and work together.\n• Functional Testing: Testing the software's features and \nfunctionality to ensure they meet the requirements and \nspecifications.\n• Acceptance Testing: Testing the software to ensure it \nmeets the customer's expectations and requirements.\n22\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe pyramid of automated testing\n23\nCSC 213\nCSC 395\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLets Create a Corresponding Unit Test Class\n1. In the monthly package\n2. Create a Java class GroceryItemTest.java\n3. Follow the directions for creating a JUnit test \ndocumented on the ZyBooks page.  It’s the easiest way I \ncould think to do this!\nGoal - show you how Unit testing is integrated into the \nfabric of IDEs and into development.\n24\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWe Reach a Critical Point - Handle the Worst Case\nThat constructor … a lot of things can go wrong!\n25\n\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture13.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThere is Another Item Called an Assert\nNot used as often because it has more computational \noverhead.  And its not the exact correct application.\n26\n\n--------------------------------------------------\n"
}