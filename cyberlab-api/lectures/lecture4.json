{
    "lecture_id": 17,
    "lecture_name": "lecture4",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGithub, Errors, and Java\nJanuary 24, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTutoring Hours Posted\nDr. Meyer has created a \nschedule.  It’s also listed here: \nhttps://tycho.canisius.edu/computerscience/\nBased on the types of errors I \nsee and the questions in \nZybooks - they should be able \nto handle them!\n3\n\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management \nAssignment 2:\n- 8/19 have started\n- One student is 85% done\n4\nLast Year\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- You are going to use git again.  Fun!\n- We are going to dive in Java.\n- How does it work\n- Example problems in Java\n- The peculiarities of the language (or pretty much all \nprogramming languages!)\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Java?\nMentioned last week it was compile, and then run.\n6\nJava Development Kit \n(JDK)\nJava Runtime \nEnvironment (JRE)\nJDK\nJRE\nCompile & run Java \napplications\nRun Java \napplications only\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHow Imports Work in Java\n- Imports in Java work the \nsame as they do in Python.  \n- You literally import\n- Some imports “come with \nthe language”.  Like Scanner. \nSo, where is it? \n7\nExercise: Let’s find where the Scanner class is.  Along the \nway we will learn how libraries work.\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhere Do I Find The Java Installation?\nExercise 1: Open a console on your Ubuntu \npartition\n> cat /etc/os-release\nThis is your Ubuntu version.  This is where to find its history: \nhttps://en.wikipedia.org/wiki/Ubuntu_version_history\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Version You Have Versus What I Have\n9\nYou\nMe\n\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nYou Could Contribute to the Linux Kernel\nThink of how terrific it would look on your resume!  They \nwould gladly bring free labor on board!\nhttps://kernel.ubuntu.com/git/\n10\n\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSo … Where is Java Installed?\nAt the console type:\n> which java\nThen type\n> ls -l /usr/bin/java\nAnyone know that right hand side is all about?\n11\nSymbolic Link!\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHere is the Java Installation!\nThis is what got installed when you did \nsudo apt install openjdk ..\nIt got installed here:\n> ls /usr/lib/jvm/\n> /usr/lib/jvm/java-21-openjdk-arm64/bin\njar        javadoc   jdb        jhsdb   jmap      jrunscript  jstatd\njarsigner  javap     jdeprscan  jimage  jmod      jshell      keytool\njava   jcmd      jdeps      jinfo   jpackage  jstack      rmiregistry\njavac jconsole  jfr        jlink   jps       jstat       serialver\n12\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWe Know Java Compiles to a Class File\nWhere the heck is this class file?  The Scanner?\nDo this:\n> cd /usr/lib/jvm/java-21-openjdk-arm64/lib\n> ls -al\n> ../bin/jimage list modules \n13\n\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhen You Compile AgePrinter \n1. There’s an import!\n2. Where do I find this class:\n/usr/lib/jvm/java-21-openjdk-arm64/lib/modules\n1. Read that .class file into memory and make it available \nfor compiling and linking.  Almost insert it right there.\n14\n\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nNow, Onto Some Java Compiling and Coding\nYou will need to clone this repository to your Ubuntu \nmachine (The URL is also on D2L for today’s lecture):\nhttps://github.com/delveccj/CSC213.SP25.git\n15\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nConstants & Why They Matter\nIt comes down to consistency.\nTake a look at the class ConstantsExample.java\nSomewhat worse, look at the class\nShippingCalculator.java\n16\n● Lack of clarity\n● Maintenance \nChallenge\n● Readability\n● Understandability\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nA Real World Example\n17\n\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Types of Things that Become Constants\n18\nApache NiFi: https://github.com/apache/nifi\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nenum - A Set of Related Constants\nLet’s look at this site:  \nhttps://github.com/deaconcu/chasing/blob/07252cdf2117f95d01837453208cca2751510c56/chasing-server/chasing-\ngame/src/main/java/com/prosper/chasing/game/util/Enums.java\n19\n\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOnto Bytes                                       \nThere are primitive types in Java; not everything is an \nObject.  Though all primitives have a corresponding Object \ntype.\nFirst item discussed is the ‘byte’ type.\nMakes sense it’s the binary storage type.  So, what is a \nbyte?   \n20\n\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHow Data is Laid Out in RAM\n21\nRAM\nA big table of memory \nlocations that hold bytes\nRelative addresses\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nDecimal to Bytes to Hex\n22\nThe three types you need to know:\n- Number (base 10 counting)\n- Binary (base 2 counting)\n- Hexadecimal (base 16 counting)\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Signed Integer Types\n23\nImplications for storage when you use these types. \nLet’s see.\nHands On Exercise\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nFloating Point\n- Decimal (or fractional) numbers represented with float or double.\n- There are limitations with respect to precision that may be \nrepresented.\n- So:\njshell> 2.0-1.7\n$3 ==> 0.30000000000000004\nThis matters a lot.  There is simply no precise binary representation \nfor this.  Though primitive wrappers may mitigate this.\n24\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nInfinity and NaN - The Tidbits of a Language Matter\nWhat about something like: 10.0 / 0.0\njshell> 10/0\n|  Exception java.lang.ArithmeticException: / by zero\n|        at (#4:1)\njshell> 1.0/0.0\n$5 ==> Infinity\njshell> 10.0/0.0\n$6 ==> Infinity\njshell> 0.0 / 0.0\n$7 ==> NaN\njshell> \n25\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nChar Type\nASCII vs. UTF-8 vs UTF-16: Let’s talk about char literals -\nwho knows about these?\n26\n\n--------------------------------------------------\nPage 27 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 26, 'page_label': '27'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nBoolean Type\nTrue or false - pretty simple.  \n27\n--------------------------------------------------\nPage 28 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 27, 'page_label': '28'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nJava a Strongly Typed Language\nYou declare a variable and its type - and that variable can only hold that type going \nforward.  This is unlike Python.\nYou can do (odd) things like: \nint total = 0, count;\nTypically separate declarations. Consider:\nRandom generator = new Random();\nOr (varadded in Version 10, 2018!)\nvar generator = new Random();\n28\n--------------------------------------------------\nPage 29 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 28, 'page_label': '29'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nInitialization\nYou must initialize a variable before you can use it.\nint count;\ncount++;\n29\n--------------------------------------------------\nPage 30 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 29, 'page_label': '30'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nArithmetic - The Java Operators\n30\nYou know these - every language \nhas these!\n--------------------------------------------------\nPage 31 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 30, 'page_label': '31'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOperator Nuances\namount -= fee;\nSame as \namount = amount - fee;\nTernary or Conditional - see the example:\n31\nif (x > 0) {\ny = 1;\n} else {\ny = -1;\n}\ny = x > 0 ? 1 : -1;\n--------------------------------------------------\nPage 32 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 31, 'page_label': '32'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Math Class\nThere are not operators for everything.  Look to the Math \nclass:\n32\nTakes primitives \nas operators and \ngoes from there!\n--------------------------------------------------\nPage 33 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 32, 'page_label': '33'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nType Conversion\n1. If both operands are of the same type, no conversion is necessary.\n2. If one operand is of a type that can be promoted to the type of the other operand, the operand will be \npromoted to the type of the other operand. For example, if you divide a float by an int, the int will be \npromoted to a float before the division takes place.\n3. If both operands are of different types, and neither can be promoted to the other, then the result of \nthe operation will be of the type that can hold the larger range of values. For example, if you divide an \nint by a long, the result will be of type long.\n4. In case of mixed type arithmetic operation if any operand is of type double, the result is of type \ndouble.\n5. In case of mixed type arithmetic operation if any operand is of type float, the result is of type float.\n6. In case of mixed type arithmetic operation if any operand is of type long, the result is of type long.\n7. In case of mixed type arithmetic operation if any operand is of type int, the result is of type int.\n8. In case of mixed type arithmetic operation if any operand is of type short or byte, the result is of type \nint.\n33\nThis is A LOT!  Good practice:  Cast or turn one of the \nvariables into the type of the other BEFORE the \noperation.  Do not mix types in arithmetic operations … \nbecause you need to consult this.  \nHands On Exercise 6\n--------------------------------------------------\nPage 34 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture4.pdf', 'page': 33, 'page_label': '34'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nBigNumbers\nEventually - you reach the limits of what can be \nrepresented.  Or, you want precise answers.  \nEnter BigNumbers:\nvar k = new \nBigInt(“1111111111111111111111111111111111111111111111111”);\nvar l = new \nBigInt(“1111111111111111111111111111111111111111111111111”);\n34\nWhat is the trade off with using BigNumbers?\nLet’s build some code and find out!\n--------------------------------------------------\n"
}