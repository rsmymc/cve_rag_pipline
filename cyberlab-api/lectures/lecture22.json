{
    "lecture_id": 15,
    "lecture_name": "lecture22",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTools for Automated Code \nDevelopment\nLecture 22\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGuest Speaker!\nPlease welcome:\n3\n\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Reading Assignment\n- Last Week\n- Exceptions\n- GUI examples (rather fun!)\n- Review for Final\n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nReading Assignment 12 Posted\n- We will also focus on Exceptions\n- We will focus on GUIs \nWill review the final next week as well!  And I will have \nresources on D2L\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management!\nLast one.  So, Lab Project 2 - coming in at about 3hrs to \ncomplete.  At least three students (as of Apr 29) had \ncompleted it.\n6\n\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCourse Evaluations\nThese are available - please do them!\n7\n\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nError Handling\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nImplementation Defects\n• Syntax Errors\n– Equivalent to a typo or grammatical error\n– Usually caught by the compiler\n– Eclipse will notify you in real-time\n• Run-time Errors\n– Errors that can only be detected during execution\n– Depends on user input or dynamic variable values\n– Usually results in an exception\n• Logic Errors\n– The program looks correct but doesn’t operate according to specification\n– Usually detected in testing \n– If not detected, it will impact robustness in the field\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides 9\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSyntax Errors • Example 2:\npublic boolean isEmpty()\n{\nif (first = last)\n{\nreturn true;\n}\nelse \n{\nreturn false;\n}\n}\n10\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n• Example 1:\nNode (E contents)\n{\nthis.contents = Contents\nthis.next = null\n}\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRuntime Errors\n• Example 1\nselection = Integer.parseInt(choice);\n• Example 2\nnode.getNext().getContents();\n11\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n• Example 3\nint[] arrayOfIntegers = new \nint[10];\nfor (int i = 0; i <= 10; i++)\n{\narrayOfIntegers[i] = i;\n} \n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLogic Errors\n• Example\n–Enqueue adds to the end of the queue instead of the front\n–IsEmpty returns true when queue is empty\n–Peek removes an item from the queue\n–Etc, etc….\n12\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStrategies for Robust Programs\n• Defensive programming\n– Write code with failure conditions in mind\n– Check your pre and post conditions\n– Validate all input\n– Understand and check your assumptions\n• Structured exception handling\n– Catch exceptions to detect error conditions\n– Throw exceptions to notify caller of error conditions\n– Only catch an exception if you know how to handle it\n– Only throw an exception if you cannot handle the error\n• Rigorous testing\n– We know this!\n13\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStructured Exception Handling\n• Old Style, notify the caller:\n– Return value\n– GetLastError()\n– Out parameters\nThe LocalAlloc function allocates memory in the \nlocal heap. It returns a pointer to the allocated \nmemory block or NULL if the allocation fails.\n– You can check the return value to \ndetermine success or failure\nYou have to remember to do this!\n14\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStructured Exception Handling\nNew Style, notify the caller:\n– Throw an exception\n• Advantages:\n– Separates error code from normal code\n– Automatic propagation of errors up the call stack\n– Differentiate errors by exception type\n– Exceptions contain rich information for debugging\n15\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\nWhy not force you to \nacknowledge stuff can go \nwrong!  It’s like a waiver form!\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is an Exception\n• An exception is an event that interrupts normal flow of the application\n• Signifies an exceptional event or error\n• Every Java exception is a class object\n• When you throw an exception you create a new instance of the class\n– throw new NumberFormatException(“Details”);\n• Throw:\n– Stops application execution\n– Walks up the call stack looking for a matching catch block\n– Terminates the process if no catch block is found\n16\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWe Know These!\n17\n\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nJava Exception Hierarchy\n• All exceptions derive from Exception which derives \nfrom Throwable.\n• You can use an existing Java exception or create your \nown.\n18\nUnhecked Checked\nhttps://download.java.net/java/early_access/p\nanama/docs/api/java.base/java/lang/Throwab\nle.html\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nChecked Exceptions\n• Represent recoverable errors\n• Must be caught somewhere in your application\n• If you call a method that throws a checked exception:\n–Catch it\n–Or use Throws to specify that it will be passed up the call stack\n19\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nChecked Exception in Java\n20\n\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUnchecked Exceptions\n• Represent unrecoverable errors\n• Java doesn’t force you to catch them\n• If you don’t catch, it will result in program termination\n• Examples\n–NumberFormatException\n–NullPointerException\n21\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUnchecked Exception Handling in Java\nYou have likely see the unchecked or Runtime exceptions:\n22\nNullPointerException\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUnchecked Exception\nThis always surprised me as it dangerous for an introductory language:\nErrors that occur during program execution are generally considered to be \nunchecked exceptions.\nThey do not have to be declared or handled explicitly in code. \nUnlike checked exceptions in some other languages, Python does not require you to \ndeclare which exceptions a method can throw or to catch exceptions that may be \nthrown at runtime. \nThis gives you more flexibility in your code but also means that you need to be \ncareful to handle errors correctly or risk unexpected program behavior or crashes.\n23\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCreating your own exceptions\n• Use Java library exceptions, unless:\n–There is no exception that matches closely enough\n–You need to differentiate from exceptions thrown by \nmethods you call\n–You need to differentiate from other exceptions you throw\n• Don’t create unchecked exceptions unless:\n–There is no way in which the calling code could recover\n24\nSlides taken from: Robust Programs and Exception Handling - Montana State Universityhttps://www.cs.montana.edu › sessions \n› Slides\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThrowing an Exception\n• Throw an exception if:\n–You have detected an error condition\n–You cannot handle it in the current method\n–The error requires the current method to terminate \nexecution\n–The error should be handled higher in the call stack\n25\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThrow Example\n26\n--------------------------------------------------\nPage 27 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 26, 'page_label': '27'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThrow Example\nYou can put details in the exception:\nthrow new NoSuchFlightException(“That flight is empty”);\nAnd recover it in the catch:\ncatch (NoSuchFlightException ex)\n{\nSystem.out.println(ex.toString());\n}\n27\n--------------------------------------------------\nPage 28 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 27, 'page_label': '28'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUsing Throws\n• You must use throws if:\n–Your method throws a checked exception\n–Your method calls a method that throws a checked \nexception and you do not catch it\n28\n--------------------------------------------------\nPage 29 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 28, 'page_label': '29'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCatching an Exception\nTry/Catch/Finally\n• Try\n– Enclose code that may throw an exception you want to catch\n• Catch\n– Specify the type of exception you want to catch\n– Catch in order from most specific to least\n• Finally \n– Code that you want executed no matter what\n– Usually cleanup code\n29\n--------------------------------------------------\nPage 30 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 29, 'page_label': '30'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nException Ordering Example\ntry\n{\n//do something\n}\ncatch(Exception ex)\n{\n//general exception handling\n}\ncatch(NumberFormatException ex)\n{\n//specific exception handling for number format exceptions\n}\n30\n--------------------------------------------------\nPage 31 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 30, 'page_label': '31'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nException \nExample\n31\n--------------------------------------------------\nPage 32 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture22.pdf', 'page': 31, 'page_label': '32'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nFinally Example\n32\n--------------------------------------------------\n"
}