{
    "lecture_id": 20,
    "lecture_name": "lecture7",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRequirements, URL \nConnections, Control Flow! \nFebruary 6, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto Selecting Desktop!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGeneral Updates\n- There will be a reading assignment and coding \nassignment on Thursday.  \n- There is a test on Thursday, Feb 15!  Practice exam to \ncome out this weekend.\n- Lab tomorrow will be in SH1008 - the room is working \nout.  Thursday’s lecture solves a big issue.  \n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management\nAssignment 4\n- 2/23 Finished\n- 10/23 Started\n- 11/23 Have not \nstarted\n4\nCoding Assignment 1\n- 10/23 Finished\n- 4/23 Started\n- 9/23 Have not started\n\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Complete last weeks in class\n- We were so close - just a couple of lines!\n- Week 4 In Class lab assignment - let’s open it up!\n- Control flow\n- Lots of examples \n- Run the github client \n- Finally complete this exercise!\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLet’s Finish Webpagedownloader.java\nPretty simple, it is in the Week 4 In Class Lab Exercise!\nCompile it and run it!\nRemember when Dr. Del Vecchio fumbled to find an \nexample to write a string to a file.  At least an easy one. \nHere is why … in fact, let’s recap all of the exercise!\n6\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: Programming Languages are Flexible\n7\n\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: Programming Languages are Flexible\n8\n\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: Programming Languages are Flexible\nWhen you Google or ChatGPT for hints, you will get a lot of \ndifferent ways.\nThere are no right or wrong ways. \nThose ways might be the most common, the most obtuse, \nold ways, new ways, recommended ways, unrecommended \nways, …  \n9\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap of Exercise: import\nImports:  This is different from \npython.  In Python this is \ncompletely legit.\nThere is a school of thought\nthat Python is not the best 1st \nlanguage.  Dr. Del Vecchio \nwould tend to agree - for \nreasons just like this.  \n10\n\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat Happens When You Try This in Java?\n1. In the in-class lab exercise you will find Recap.java.\n2. Look at the main method.  Try to compile it.\n3. Yuck - there is an error!  Actually a couple!  Let’s fix \nthem! \n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: File Name Must Match Class Name\nThe name of the file must match the name of the Class.\nBut Classes are really discussed until Chapter 7 …\n12\n\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: Imports Only Before the Class Signature\n13\n\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThink of How ‘Easy’ It is\nIn Python I teach a student:\n14\nStudent\n“Makes sense!”\n* Image created by Dall-e2\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThink of How ‘Confusing’ It Is \n15\n* Image created by Dall-e2\nIn C I teach a student:\n“I have to compile? And what is \nthat include bit?  And the function \naccepts void - why? Why does it \nreturn 0?  Why is it named main? \nAnd what is encapsulation and \nreusability …”\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThink of How ‘Confusing’ It Is \n16\n* Image created by Dall-e2\nIn Java I teach a student:\n“I have to compile? And I have to \npay attention to the nested curly \nbraces?  What’s a class signature? \nAnd what is that System.out bit?  \nAnd the function accepts String[] -\nwhy? What does void mean?  Why \nis it named main? And what is \nencapsulation and reusability …”\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: Imports Only Before the Signature\n17\nSignature Class Name\nWhat happens when we move the import to the \nbottom?  Would that work?\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: Command Line Arguments\nThis confuses sometimes:\n18\n0 1 2 3\nhttps://www.bbc.com arg1 arg2 arg3\nString \narray\nCan be sent in \nand unused!\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap: Class Variables\nHeck, I even introduced something ZyBooks has not \ntouched yet!  But there is a reason why.\n19\nA bit too early to show you!\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLike a Scripting Language - Your Java Exposure so Far\nEverything is tucked inside the mainmethod\n20\nZyBook authors are \n(wisely) making an \nObject oriented \nlanguage behave \nlike:\na scripting language!\n\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThere Was One Question\n“Can I access a class variable from other classes?”\nYes - this will be delved into in future chapters.  \nI will not explain how now.  I thought about showing an example but \n… there are too many concepts I need to explain in addition.\nBaby steps.  We’ll build up to it.\nIt’s similar to Python but more involved.\n21\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nConditional Logic - Expressed as a Flowchart\n22\nWhat a neat test question!\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime for Another In Class Example!  \nLet’s follow along with the items in Branches.java.  A few \ntips!\n1. {} - Curly braces and the dangers of avoiding them.\n2. Equality differs when it comes to primitives and Objects.\n3. Show no initialization cases\n4. Show compiler case … this is pretty wild.  Go to \nhttps://godbolt.org\n23\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nPrecedence Rules\n24\nJust know these! Too many to review!\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\ncompareTo()\nWe will touch on this a bunch later on!  It is used a lot for \nsorting of elements.\n25\n\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nString Operations\n26\nTake a look at the String API!\n--------------------------------------------------\nPage 27 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 26, 'page_label': '27'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUse the String API\nI want to get the the following out of this String - the \ncharacters at positions 4-6 inclusive.\nAare River\ne R\nHow do I do this with the String API?\n27\n--------------------------------------------------\nPage 28 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 27, 'page_label': '28'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThis is Important\n28\n\n--------------------------------------------------\nPage 29 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 28, 'page_label': '29'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nShort Circuit Evaluation\n29\n\n--------------------------------------------------\nPage 30 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 29, 'page_label': '30'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStudy This - Why is it Not a Threat?\n30\n\n--------------------------------------------------\nPage 31 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 30, 'page_label': '31'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nFingers Crossed that This Works!\nGo to the repo we created last week!  Let’s rerun those \ncommand!  Then:\n➜gh repo view --repo <repo-name>\n➜git push -u origin main\n31\n--------------------------------------------------\nPage 32 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 31, 'page_label': '32'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGithub Backtrack\nFind the public project you had on github.\nOr - simply create a new one!  It’s easy!\nStep 1. Go to github.com\nStep 2.  Visually it looked like this:\n32\n\n--------------------------------------------------\nPage 33 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 32, 'page_label': '33'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAccessing Github from a Container (Advanced ZyLabs)\nStep 3. From the ZyLabs In Class Lab - do the following:\n➜ cd gh_2.42.1_linux_amd64/\n➜ ls\n➜ ls\nbin  LICENSE  share\n➜ cd bin/\n➜ ./gh auth login\nWe need to login in via github and indicate to use a personal access token!\n33\n--------------------------------------------------\nPage 34 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 33, 'page_label': '34'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGenerating a Github Access Token\nStep 4. Generate an access token. Go to github.com\n34\n1. Settings\n 2. Developer \nSettings\n3. Personal access token\n4. Create and Copy!\n\n--------------------------------------------------\nPage 35 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 34, 'page_label': '35'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nBe Sure to Give the Token Access Privs\nStep 5. Select and enable.  Select repo, write:package, \nread:package, admin\nWhy is this so fine grained?\nStep 6. It is time to, finally, login to github! Copy and paste \nthe generated key back into the ZyLabs terminal.\nOk - that was a lot!  But it shows the hoops you will jump \nthrough as a developer later in life!\n35\n--------------------------------------------------\nPage 36 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 35, 'page_label': '36'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nBe Sure to Give the Token Access Privs\nStep 7. We now need to create a folder for the repo. Issue the following \ncommands (lets not) create it in the gh distro folder ..  do this instead.\n➜cd ..\n➜cd ..\n➜ls\nBranches.java        gh_2.42.1_linux_386.tar  WebpageDownloader.java\ngh_2.42.1_linux_386  Recap.java\n➜mkdir git_example\n➜cd git_example/\n36\n--------------------------------------------------\nPage 37 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture7.pdf', 'page': 36, 'page_label': '37'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLast Sequence of Steps\nStep 8.  Follow the directions on the github site you \ncreated.  But, before you do the push, you have to do the \nfollowing:\ngit checkout -b master\n37\n--------------------------------------------------\n"
}