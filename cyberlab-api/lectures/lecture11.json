{
    "lecture_id": 3,
    "lecture_name": "lecture11",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nExam 1 Summary, Arrays, & \nOverview of Methods\nFebruary 27, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Review the test questions\n- Assignments for next two weeks \n- Lab Project 1 released today.  Will discuss at end of lecture.\n- Two (extended!) assignments due this Thursday.\n- Reading assignment 6 due next Thursday  - do your best and I will cover OO on Tuesday.\n- There will be a coding assignment assigned on this Thursday.\n- Classes for this week\n- No class on Wednesday (Feb 28) and Thursday (Feb 29).  Dr. Del Vecchio at an NSF conference.\n- Will be checking email!\n- Today - User-defined methods\n- The building blocks for object oriented programming\n- First Week of March - Object Oriented programming - we are headed there!\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTest Questions\nQuestion 26 - If you got this incorrect - show it to me.  I \nwill give you credit.  It was clearly worded confusingly.\nQuestion 45.1 - Matrix size.  If you got this incorrect - show \nit to me.  I will give you credit.\n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management & Assignments\nNote, an extra week was given for both!\nCoding Assignment 2: \n6/22 - completed\n8/22 - started\n8/22 - not started\n5\nReading Assignment 5:\n12/22 - completed\n6/22 - started\n4/22 - not started\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCopying Arrays - One Last Point for Last Lecture\nIt can get odd.  Assignment has a different effect that a \ncopy:\n6\n\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nMethods - the Basics\n7\nMethod - a named list of statements\nStatements\nInvocation\nWhat is \nhere? Or, \nrather,  \nwhat is \nmissing\nhere.\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nImplicit Return - Most Languages Have them\nTake a look at C.  Here \nits main method (the \none analogous to Java) \nrequires a return.\nAny guesses what the \nvalue means?\n8\n\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOpen a Linux Terminal\nls\necho $?\nls garbage!!!\necho $?\n● 0: The command executed successfully and produced the desired output.\n● 1: An error occurred, but the command was still able to produce output.\n● 2: An error occurred, and the command was unable to produce output.\n● >2: Other non-standard exit codes may also be returned for specific error \nconditions.\nI actually use this in Lab Project 1!  Its is the exit code?\nDoes Windows work the same way from its terminal?\n9\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHow to Get the Windows Exit Value\nYep!\ndir C:\\non-existent-directory\necho %ERRORLEVEL%\n10\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Linux Terminal (any Terminal Really!)\nIn a sense, yes, the Linux command prompt (often referred to as a shell) is a \nprogram itself, and executing commands like lsfrom the prompt can be \nthought of as invoking functions provided by that shell program.\nThe shell is an interactive command interpreter that allows users to interact \nwith the operating system by executing commands. When you type a \ncommand at the shell prompt and press Enter, the shell interprets the \ncommand, searches for the corresponding executable file (either a built -in \nshell command or an external program), and then executes it.\n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAccess Modifiers: Methods\nThese are important.  It leads into Object Oriented \nProgramming.  Let’s start with the basics: public vs private. \n12\nMethods!\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAccess Modifiers: Class Variables\n13\nprivate - I am only accessible from \nwithin the class where I am defined!\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat About Classes? Can Those Be Private?\nWhat do we think?\nTake a look at Funky.java\nThis is an advanced topic.  I came across it infrequently \nwhen programming - but did come across it.\n14\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nParameters and Arguments\nThis is the parameter\nThis is the argument - an instance of the parameter\n15\n\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nMethods - Why They Are Needed\nIn one sense - they should encapsulate or centralize behavior. \nReason 1: That centralization point.  It is vitally important.  \nCentralization avoids the problem of “copy and paste” madness.\nLet’s look at: CountWordFrequency.java and \nCountWordOccurence.java  This stuff happens all the time …\n16\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nMethods - Why They Are Needed\nIn one sense - they should encapsulate or centralize behavior. \nReason 2: What is this class doing!  The same holds for Python - what \nis this script doing!  Look at MainAllInMain.java  … what is this doing.\nA method should do one discrete thing.  One discrete task.\nIt should almost read like a story (self documenting code)\n17\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nMethods - Why They Are Needed\nIn one sense - they should encapsulate or centralize \nbehavior. \nReason 3: They lend themselves well to testing.  This is a \ncritical point of large scale programming.  Unit testing.\n18\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUnit Testing\nUnit testing is a software testing technique where individual units or components \nof a software application are tested in isolation to ensure that each unit functions \ncorrectly as expected. The purpose of unit testing is to validate that each unit of \nthe software performs as intended and meets its design specifications.\nLab Project One uses Unit tests.\nIn Java, they are called JUnit test.\nIt is really, a very simple concept.\n19\nAutomated!\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nA Simple Example\n20\nYou assert that the code \nyou author fulfills \nspecific test cases.\nClass\nTester Class\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOpen This View in Visual Studio Code\nUnit tests are so important \nthat most IDEs just include \na jar file to use them.\nIt is just expected - you will \ndo that!\n21\n\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIDEs will Integrate Testing Within the UI\nFound here in Visual \nStudio Code\n22\n\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is This Stuff\nLet’s look at the API.  It can do a lot - we’ll just start with a \nlittle.\n23\n\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIn Class Demo\nLet’s go the opposite \nway.  We will not write \ncode - rather we will \nwrite failing tests first.\nThen we will write the \ncode.\n24\n\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIn Class Exercise\nLet’s go the opposite \nway.  We will not write \ncode - rather we will \nwrite failing tests first.\nThen we will write the \ncode.\n25\nDid you notice this?\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGood Test Cases for the Last Question\nString[] input1 = null;\ndouble[] output1 = StringProcessor.translateStringArray(input1);\nassertArrayEquals(new double[]{1.0, 2.0, 3.0}, output1, 0.0);\nString[] input1 = {};\ndouble[] output1 = StringProcessor.translateStringArray(input1);\nassertArrayEquals(new double[]{1.0, 2.0, 3.0}, output1, 0.0);\nString[] input1 = {\"one\", \"two\", \"three\"};\ndouble[] output1 = StringProcessor.translateStringArray(input1);\nassertArrayEquals(new double[]{1.0, 2.0, 3.0}, output1, 0.0);\nString[] input2 = {\"three\", \"one\", \"two\", \"three\", \"two\"};\ndouble[] output2 = StringProcessor.translateStringArray(input2);\nassertArrayEquals(new double[]{3.0, 1.0, 2.0, 3.0, 2.0}, output2, 0.0);\nString[] input3 = {\"four\", \"five\", null, \"two\"};\ndouble[] output3 = StringProcessor.translateStringArray(input3);\nassertArrayEquals(new double[]{Double.NaN, Double.NaN, Double.NaN, 2.0}, output3, 0.0);\n26\n--------------------------------------------------\nPage 27 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 26, 'page_label': '27'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nDo Folks Really Do This?\nDo they really write test first applications?\nYes - for certain.  Larger applications will have 1000s of tests. It’s \nflexible though.  Some shops are more lenient than others.  Some \nshops are absolute sticklers on it.\nThe introduction of devsecops (introducing security into the process) \nhas brought the focus back on tests.\nLet’s look at Apache NiFi\n27\n--------------------------------------------------\nPage 28 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 27, 'page_label': '28'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nVisibility of Method Variables\nOnly visible inside the method\n28\n\n--------------------------------------------------\nPage 29 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 28, 'page_label': '29'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nMethod Overloading\nUsing the same name \nand return type but \ndifferent parameters. It \nis everywhere in object \noriented programming.\n29\n\n--------------------------------------------------\nPage 30 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture11.pdf', 'page': 29, 'page_label': '30'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nPassing By Value Versus Passing By Reference\nSimple: When you pass a variable as an argument to a \nfunction, you are passing a reference to the object that the \nvariable refers to, rather than a copy of the object itself.\n30\nprimitives Objects\nint, double, \nboolean, long, etc.\nObject, String, int[], \ndouble[], ArrayList<String> \nValue                           vs.                       Reference\n--------------------------------------------------\n"
}