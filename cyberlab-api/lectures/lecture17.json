{
    "lecture_id": 9,
    "lecture_name": "lecture17",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Inheritance\nLecture 17\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Exam recap\n- Focus for remainder of semester\n- Inheritance\n- Inheritance hierarchies\n- Enums\n- In-class exercise\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management\nThere are two assignments due on this Thursdays.  One \nreading - one coding.  The stats:\nCoding Assignment 4\n3/22 - Completed\n3/22 - Started \n16/22 - Not started\n4\nReading Assignment 9\n8/22 - Completed\n2/22 - Started \n12/22 - Not started\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nExam Recap\nThe results were good.\nThere was a 4 pt curve (as in if you got 42 - it went to 46).\nThere was no multiple choice questions folks universally \nhad trouble with.\nThe question about the Car classes was mostly good.\nThe question about the Unit tests was mostly good.\nThe last question - I showed a lot of leniency.  There is one \nitem I would like to review:\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nReading from Streams\nIt takes the char buffer, makes it 1024 bytes, and each read fills in that buffer with 1024 bytes!\n6\n\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nFocus for Remainder of Semester\nWe are going to move into:\n- Inheritance & Interfaces\n- Review of Exceptions\n- Generics\n- Maybe UIs (they would like me to do this!)\nLab Perspective:\n- We will create a maven project (Project Two - released on 17th).\n- That will go into your github repository.\n- That will be something you may place on your resume.\n7\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nMoving Toward Object Hierarchies\n8\nThey have \ncommonalities.\nAnd they have \ndifferences.\nClassification \nsystem allows \nand streamlines \nboth.\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSuper and Subclasses\n9\nManageris a \nsubclass of \nEmployee\nEmployeeis the \nsuperclass\nCustom fields \nand methods \nonly Manager\nhas\n\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSuper and Subclass Diagram\nThis is a UML Diagram:\ngetNameis defined in Employee\nand shared by Manager.\ngetSalaryis defined in both.  It is \nis overridden in Manager.\nsetBonusis in Manageronly. \n10\nEmployee\nname: String\nsalary: double\ngetName(): String\ngetSalary(): double\nManager\nbonus: double\ngetSalary(): double\nsetBonus(bonus: double): void\nextends\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHere is an Easy Example for Why Manager is Needed\nManagers, of course, get bonuses.  Regular employees do not\nManager boss = new Manager(...);\nboss.setBonus(10000); // Defined in subclass\nboss.raiseSalary(5);  // Inherited from superclass\nSo, an Employeecannot do the above with respect to setBonus.\n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverriding Calls Superclass in the Constructor\nBut there is no requirement to do so.\nThe following provides an example:\npublic Manager(String name, double salary){\nsuper(name, salary);\nbonus = 0;\n}\n12\nManager.java\nEmployee.java\nSubclass relies on the initialization \nof the superclass to be completed \nbefore the subclass can initialize its \nown state.  Must be the first line!\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverriding Often Involves Calling the Superclass\nBut there is no requirement to do so.\nThe following provides an example:\npublic double getSalary(){\nreturn super.getSalary() + bonus;\n}\n13\nManager.java\nEmployee.java\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nObject Oriented Programming & Diagrams\n14\nIt’s like a hierarchy.\nObject oriented \nprogramming \npresented like an \norganizational chart.\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAll Subclasses ‘Equivalent’ as a Superclass Type \nBy equivalent I mean they are assignable to the superclass type.  Consider this code which is completely \nlegitimate:\nEmployee[] staff = new Employee[ … ];\nstaff[0] = new Employee(...);\nstaff[1] = new Manager(...);\nstaff[2] = new Intern()...;\n------ but\nstaff[0].getSalary(); // fine\nstaff[0].setBonus(10000); // compile time error!  Why?\n15\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCasting Requires an instanceof Check\nif(empl instanceof Manager mgr){\nmgr.setBonus(10000);\n}\n16\nSometimes you create objects of the supertype to pass around \nmore easily between methods.  Then you need to figure out the \nspecific type within a method.\ninstanceof becomes used as code bases get larger and \nlarger.\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHow Many Times is it Used in NiFi\nThis project has roughly 8,405 Java files.\n4,113 extend another class.  More than half!  \n17\nLinux grep output for NiFi project source code\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nI Don’t Want The Subclass to Change Stuff\nThat bad subclass - it has not clue what it should do for \nsome of these methods.\nSimply use the final keyword:\npublic final String getName()  \n18\nEmployee.javaManager.java\n“I want to extend this.” “No.”\nfinal\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nI Only Want the Subclass to Define the Method \n19\nabstract\nA few items here:\nThe abstract method is not defined.  \nSubclasses must implement it!\nEven If a class has one abstract method -\nthe class itself is abstract.\nYou cannot initialize an abstract class. Why?\nThe abstract class may implement other \nmethods.\n\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nProtected Access\nThe protected access modifier allows a subclass to access a method or variable in the superclass. It also allows the members of a \nclass to be used within the same package, even if they are not subclassed.\nThe protected access modifier has its own use cases, such as allowing access to the member variables and methods within the class \nhierarchy, while still providing encapsulation. However, using protected members inappropriately or excessively can lead to code that \nis difficult to read, understand, and maintain. Therefore, it is recommended to use protected access only when necessary and in the \nappropriate context.\n--------\nBasically, if you find yourself contemplating the use of the \nprotected keyword you are in the weeds.  You have a super \nlarge project on your hands, you are trying to figure out how to \nget access to the data you want … without changing too much.\n20\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSealed Access\nA sealed class controls which classes may extend it.  Best \nshown with an example:\n21\n- JSONPrimitiveis sealed\n… ok\n- Only JSONNumber, \nJSONString, JSONBooleanand \nJSONNullmay implement it.\n- If another class tries it will be a \ncompile time error!\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Proof is in the Pudding\nprotectedand sealed- how often are they used?\nFor the Apache NiFi project - consisting of 8k Java files:\nprotected- a bunch!\nsealed- never!\n22\n\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nObject: The Cosmic Superclass\nEvery Java class extends from Object.  Has these methods:\n23\n\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Object Class Encapsulates Commonality\nThese methods provide basic functionality that is useful for all objects.\nFor example, the toStringmethod returns a string representation of an object. This is useful for \ndebugging and logging, as well as for displaying objects in user interfaces. The equalsmethod \ncompares two objects for equality, based on their contents. This is useful for collections and other \ndata structures, as well as for testing and validation.\nBy providing these common methods in the Objectclass, Java simplifies the process of writing \nand using classes. Developers can rely on these methods being available for all objects, regardless \nof their specific implementation. Additionally, Java provides mechanisms for overriding these \nmethods in subclasses, allowing developers to customize their behavior as needed.\nFrom ChatGPT - pretty respectable reason why.\n24\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverriding the equals()Method\nOut of the box it simply compares \nreferences.  We reviewed this before -\ntwo object with the same reference.\nUnless it is specifically overridden - as \nis the case for String.\nHere is an example using an Item\nclass created in the book I used last \nyear.\n25\n\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverriding the hashCode() Method\nThis is necessary if you override \nequals().\nYou must do this and do it correctly!\nAs far as is reasonably practical, \nthe hashCodemethod defined by \nclass Object returns distinct \nintegers for distinct objects .\n26\nNot hard to define your own hash code - you \njust need to remember to do it!\n--------------------------------------------------\nPage 27 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 26, 'page_label': '27'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCloning Objects\nOh … cloning.  Why it’s complicated - need to draw this out on the board.\nLet’s consider NiFi - a project with 8k Java classes.\nHow many times does it override the default clone()method.\n51 times.  Not much.  \nLet’s look at an example:\n./nifi-\napi/src/main/java/org/apache/nifi/controller/status/analytics/ConnectionStatusPredictions.java\n27\n--------------------------------------------------\nPage 28 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture17.pdf', 'page': 27, 'page_label': '28'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIn-Class Assignment\n28\nNotes:\nBankInfosymbol means \nBankcontains a BankInfo\ninstance.\nThe italicized method in \nBankmeans it is abstract.\nThe italicized Bankmeans -\nit is abstract!  The class itself.\n--------------------------------------------------\n"
}