{
    "lecture_id": 11,
    "lecture_name": "lecture19",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Generics\nLecture 19\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Generics\n- A fun topic\n- Tie ins to Set Theory in terms of types and collections\n- Very powerful\n- Project 2\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGeneric Classes\nOk - so you have:\n- A class Entry\n- With two generic \ntypes\n- K,V\n- So, what does that \nmean\n4\n\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nInstances of Generic Classes\n- Here, Stringis the type argument for the K type parameter and Integeris \nthe type argument for the V type parameter. The diamond operator <> is used \nto infer the types\n- Once you define a generic - there is simply no changing it!\n- Also, the type cannot between <> cannot be a primitive type - double, int, etc.\n5\n\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGreat!  So … Why do We Need Generics?\nPrior to Java 1.5 (September 2004) you had to do stuff like \nthis:\n6\nOk!\nAhh, \ncasting!\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOne Really Great Solution!\nArrayList<String> stringList\nArrayList<Random> randomsList\nArrayList<Integer> integers\n…\nWhere you calculate each potential type a priori (ahead of \ntime).\nWhat a terrible solution.\n7\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nInstead - You Get This\nYou didn’t even realize what you were using!  Its super \npowerful.\n8\nNote, none of this is in Python\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGeneric Methods\nThis is another example that begins to explain why generics are of use:\nSo, this method can be used to swap elements in an arbitrary array\nAs long as the array element type is not a primitive type.\n9\n\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSometimes It’s Too Generic Though\n10\nThis is a generic.\nTrue.\nBut what else can you do \nwith this except what you \nsee to the left and the fact \nis an object?\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nType Bounds\nYou can place a bound on the type.  Here, the extends \nbehaves like a subclass:\n11\nSubtype or Subclass\nCool!\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nA More Concise Example\npublic static <T extends Number> void \nmyMethod(T arg) {\n// \n12\nWhat it means is that any\nof these classes can be \nused with this method.\nBut, nothing else!\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThis Would Work Too\npublic static void myMethod(Number arg) {\nBut using generics with bounds provides additional type safety and \nexpressiveness by specifying the exact types that are allowed.\nThis one was hard for even your instructor to grasp.  However, if you were on a \nproject doing this full time each day - it would be obvious!\nHelpful in identifying compile time errors.\n13\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUnbounded Wildcards\nSometimes you have very very generic operations.  You use \nthe wonderful ? operator alone!\n14\nGood or \nbad to do \nmultiple \nreturns?\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nNote - The ? Is Not a Type Argument\nThis won’t work:\nIt won’t even compile.  Interestingly, at this point - attempting to do something like \nthat is sort of what Python does!  It is like dynamic typing.  This is why Python is both \ngreat and dangerous; you are leaving a lot to the developer paying attention to \ndetails that the compiler would gladly do and do better.\n15\n\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Happening Beneath the Hood\nSo, generics are great. But how the \nheck does it do it?  \nThe Java Virtual Machine uses \nsomething called “erasure”.  So, \nJava translates Entry<K, V> to \nthe following code when compiled.\nWhen compiled with  type, it uses \n“erasure” to assign the type you \ngive it. \nEntry<String, Integer>\n16\n\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSwitch to the Project\nYou should all login to this site:\nhttps://polygon.io/\n17\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIt Will Look Like This\n18\n\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture19.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLets See What a Rest Endpoint Does\nIssue this type of command from the command line:\ncurl https://api.polygon.io/v2/aggs/ticker/AAPL/range/1/day/2023 -01-09/2023-01-\n09?apiKey=yuZcx1o78d3WQFz2Nx1u5C0VFCcMkzQg\n19\n--------------------------------------------------\n"
}