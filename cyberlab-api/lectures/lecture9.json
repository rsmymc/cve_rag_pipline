{
    "lecture_id": 22,
    "lecture_name": "lecture9",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nControl Flow and Test \nReview\nFebruary 13, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Complete looping constructs\n- These are not too hard.  A few notes of interest.\n- Lab for tomorrow - Ellie will lead the lab.\n- A note on building a 3rd party library\n- Test review \n- Need a student shadow volunteer for Thursday, \nFebruary 22nd!\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management\nReading Assignment 4:  Everybody submitted it - which is great!  \nThe distribution of grades was either great or not so great.\nLab 2: Some folks did not submit this lab.  Lab 3 due tomorrow \nat 11:59PM.\n*In Industry - due dates matter!  “As long as they get the work \ndone and learn.”  is no longer valid. \n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhile Loops\nThis are fairly standard.  And are everywhere.  These are \nfrom NiFi:\n5\n\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhile Loops\n6\nA little interesting - the return is the break.\nViolates single entry - single return principle.  \n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhen to Choose a Loop and For\n7\nIt’s pretty easy.\nCan anyone give examples of some problems where one or \nthe either is better?  Or, mandatory?\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLoops and Breaks and Continues …\nLet’s look at an example of these.  We will:\n1. Review the code in ZyBooks\na. There is a compile problem - how do we solve it!\nb. Order of review:\ni. addingASemicolon();\nii.doWhile();\niii.forExample();\niv.loopVersusWhile();\nv. System.out.println(LightState.RED);\n2. We will review the Java bytecode (think assembly for those who have taken the \nCSC Hardware course.) For this we will use: www.godbolt.com\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nEnums\nWe will use these a bunch \nlater on.\nSo, why does this work?  I \nthought it was a bad idea to \ncompare Objects with == …\n9\n\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLet’s Review the Crazy Whiles and For Examples\nI just thought of these!\nWhat terrific examples - can’t you just imagine this being a \ntest question.  \n“What would this program print to the screen.” type deal.  \nI can imagine it now, a grid with cells and you need to fill it \nin!\nLook at CrazyForLoop.java and CrazyWhileLoop.java\n10\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAn Infinite Loop\nDr. Del Vecchio to make an infinite loop … that lead to:\nA non-responsive container that is caused by …\nA runaway Java process.\nYou need to kill that process.  I am not even sure what this \nwill do to ZyBooks!\n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTest Review\n- Review the questions\n- Some notes on the API example question - the one with \nthe graphic of the API.\n12\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture9.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWednesday Lab\n- GA Ellie will lead the lab.\n- My time management issues!  I’ll show them to you!\n- Let’s review the lab!\n- Found a high quality Java API that works just like the Python \none.  This is really helpful for us.\n- Link on the D2L page. https://github.com/TheoKanning/openai-java\n13\n--------------------------------------------------\n"
}