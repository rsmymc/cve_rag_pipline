{
    "lecture_id": 21,
    "lecture_name": "lecture8",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIDE Introduction, Control \nFlow, a Coding Exercise\nFebruary 8, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Complete last weeks in class\n- We were so close - just a couple of lines!\n- Control flow\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGeneral Updates\n- Reading Assignment 5 and Coding Assignment 2 Released!\n- Due on Feb 22nd\n- Exam Next Thursday, Feb 15\n- In person, pencils only!\n- Job Fairs - on campus in March\n- Keep on the lookout\n- Blockchain Research Presentation - Tomorrow, Feb 9, \n2:30PM, I think in 1013A or B!  But certainly in Science Hall.\n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management\nReading Assignment 4:\n6/22 - Done!\n14/22 - Working on it!\n2/22 - Yet to start\n5\n\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Finish the login to github & push\n- Something tells me this might not be so easy!  Maybe!\n- Introduce and IDE\n- This will change everything\n- Life will get easier\n6\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGithub Backtrack\nFind the public project you had on github.\nOr - simply create a new one!  It’s easy!\nStep 1. Go to github.com\nStep 2.  Visually it looked like this:\n7\n\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAccessing Github from a Container (Advanced ZyLabs)\nStep 3. From the ZyLabs In Class Lab - do the following:\n➜ cd gh_2.42.1_linux_amd64/\n➜ ls\n➜ ls\nbin  LICENSE  share\n➜ cd bin/\n➜ ./gh auth login\nWe need to login in via github and indicate to use a personal access token!\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGenerating a Github Access Token\nStep 4. Generate an access token. Go to github.com\n9\n1. Settings\n 2. Developer \nSettings\n3. Personal access token\n4. Create and Copy!\n\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nBe Sure to Give the Token Access Privs\nStep 5. Select and enable.  Select repo, write:package, \nread:package, admin\nWhy is this so fine grained?\nStep 6. It is time to, finally, login to github! Copy and paste \nthe generated key back into the ZyLabs terminal.\nOk - that was a lot!  But it shows the hoops you will jump \nthrough as a developer later in life!\n10\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nBe Sure to Give the Token Access Privs\nStep 7. We now need to create a folder for the repo. Issue the following \ncommands (lets not) create it in the gh distro folder ..  do this instead.\n➜cd ..\n➜cd ..\n➜ls\nBranches.java        gh_2.42.1_linux_386.tar  WebpageDownloader.java\ngh_2.42.1_linux_386  Recap.java\n➜mkdir git_example\n➜cd git_example/\n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLast Sequence of Steps\nStep 8.  Follow the directions on the github site you \ncreated.  But, before you do the push, you have to do the \nfollowing:\ngit checkout -b master\n12\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThis Is Sort of Limiting\nA great start - but not exactly realistic.  No one in Industry \nwould use this.  Or something dreadful called emacs :)\n13\nGood as a \nstarting point -\nbut so lacking.\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nEnter the Integrated Development Environment\nAlso called an IDE.  A long history:\n1970s:\n● Early text editors and debuggers like ed, vi, gdb provided basic coding and testing capabilities\n1980s:\n● Turbo Pascal (1983) first to integrate editor, compiler, debugger in a GUI\n● Macintosh Programmer's Workshop (1985) was early IDE for Mac\n● Borland Turbo C++ (1987) popular DOS IDE with integrated tools\n1990s:\n● Visual Basic (1991) provided GUI builder and editor, widely used\n● Delphi (1995) pioneered modern IDE features like form designer\n● Java IDEs like NetBeans and Eclipse emerge as open source options\n2000s:\n● Microsoft launches Visual Studio .NET (2002)\n● Eclipse and NetBeans gain popularity especially in open source community\n● IntelliJ IDEA emerges as commercial Java/Python IDE\n2010s:\n● Growth of cloud computing leads to web -based IDEs like Cloud9\n● GitHub Atom, VS Code emerge as simplified, modular IDEs\n2020s:\n● AI capabilities such as autocomplete, refactoring, code analysis seen in IDEs like TabNine and others 14\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWe Will Focus on Visual Studio Code\nA Microsoft Product that works … everywhere!\n15\n- You get a lot.\n- It blows a text editor \ncoupled with a compiler out \nof the water.\n- Its integrated with the \nZyLabs environment.\n- If you don’t know one - you \nwill need to! A Smart Move!\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nFeatures to Make Life Easier\n1. Integrated terminal - VS Code has an integrated terminal window allowing you to run command line tools \nlike compilers without leaving the editor.\n2. Debugging support - It has built-in debugging for multiple languages, supporting setting breakpoints, \ninspecting variables, and step -through debugging capabilities.\n3. Intelligent code completion - It provides smart suggestions and autocomplete as you type based on \nunderstanding your project code.\n4. Inline error detection - Syntax errors and other issues are underlined immediately in the editor rather than \nhaving to compile to see them.\n5. Code refactoring tools - Automated support for safely renaming symbols or reorganizing code structure.\n6. Extension ecosystem - Plugins extend functionality providing everything from themes/icons to additional \nlanguage/tooling support.\n7. Customization and theming - Everything from the UI theme to key bindings can be customized to a user's \npreference.\n8. Diff view - Allows comparing different versions of files and seeing git changes directly in the editor.\n9. Version Control System Integration - Built right in, you need to know the commands but it makes it much \nmuch easier to use.\n10. Github Autopilot Integration - Forget you heard that!  Ok, I’ll show you later in the course! 16\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHow to Enable in ZyLabs\nNote - Works best in \nChrome and Firefox.  \nSafari people - I can \nhelp you out! \nGo to Week Four In-\nClass Lab.\nEnable this:\n17\n\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nZyLabs Interface will Look Like This\n18\nSwitch back to old \nstyle if you want!\nDrag to increase \nvertical size\nToolbar\nFiles in usercode\ndirector\nIDE Settings\nZyLab Settings\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOpen the Command Prompt\nFine grained controls.\nOpen a new terminal \nwindow. This is \nembedded directly in \nthe VS Code!\n19\n\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCommand Prompt and Others\n20\nYou can get a sense of what else is possible.  Click on these.\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOpen WebpageDownloader.java\n21\n1. Open file\n2. Look at snapshot \nview to the right - its \ninteractive!\n3.Look at the color \ncoding!  It can be \ncustomized.\n4. Hover over \njava.io.PrintWriter -\nyou see the \ndocumentation!\n5. Type java.net -\nautocomplete!  This is \ncrucial to have!\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nChange WebpageDownloader and View History\n22\n1. Edit the file.\n2. Add a comment.\n3. Wait about 10 \nseconds.\n4.  Add another \ncomment.\n5. Wait about 10 \nseconds.\n6. Open TIMELINE to \nthe left. \n7. Drag upward.\n8. You will see the \ncomplete history of \nchanges is there.\n9. Opens in tabs you \nmay close\nSolves the “I wish I \ncould back to what it \nlooked like 10 minutes \nago … “ problem.\n\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nProject Information\n23\n1. Bring up JAVA PROJECTS\n2. Look at JRE System Library.  This is the \nJRE it is using.\n3. It shows all the libraries that are \nincluded.\n4. Poke around - open up java.base.  Look \nat java.lang - you can find the \njava.lang.math, this you are a little familiar \nwith.\n5. The Referenced Libraries may be things \nincluded by the ZyBooks people.  Certainly \nnot part of the base JDK installation.\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRunning a Java Main Method\n24\nThis will simply have to be shown!\nYou need to look at launch.json\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nProblems are Listed Out\n25\n1. Click on the PROBLEMS tab at bottom.\n2. Lists out problems that will kill \ncompilation processes.\n3. Lists out problems that are just not good \ncoding ideas.\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntegrated Debugger\nThis will simply have to be shown!\n26\n--------------------------------------------------\nPage 27 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 26, 'page_label': '27'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRefactoring is a Breeze!\n27\n1. Who knows what refactoring is?\n2. Basically, reorganizing your code for the \nbetter.\n3. Goes hand in hand with unit testing \n(another thing we will do later on!)\n4. This is super fun, and where code can \nbecome very streamlined.\n--------------------------------------------------\nPage 28 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 27, 'page_label': '28'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nVCS Integration\n28\n\n--------------------------------------------------\nPage 29 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture8.pdf', 'page': 28, 'page_label': '29'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nExtensions for Many Things\nYou can add extensions!\nWe will at some point!\nNeed to be careful - they do \nnot always work!\n29\n\n--------------------------------------------------\n"
}