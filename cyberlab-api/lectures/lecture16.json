{
    "lecture_id": 8,
    "lecture_name": "lecture16",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Maven \n(Build Automation!)\nLecture 16\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\nTest 2\n- Tuesday, March 26 - 10AM!  In Person!\nLab Project 1\nQuestion to Class\n- Refactoring\nAssignments\n- Two posted - Due April 11!\nBuild Automation Lecture\n- Seeing is believing\n- Welcome to the best maven tutorial ever!\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLab Project One\n20 of 22 students completed it.  And I am guessing they got \neverything right!\n- I have to make that next one harder!\nThe auto-grader worked mostly ok - with the exception of \nthe last question.\n- Had to do with the formatting\n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nQuestion to Class\nI actually read your code.  I see how you do things.\nNo one will be offended if I use their code as examples of \nhow things can be refactored to be done:\n- More streamlined, or\n- More clearly?\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTwo Assignments Posted\nWe are moving into polymorphism.  Things can get complex \npretty quickly.\nWork on these assignments over break.  If you have \nquestions email me.\n6\n\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 1: Review this github project.\nOpen this URL here:https://github.com/mkyong/maven-examples\n7\nItems to note:\n1. It is one github project.\n2. It assumes you only need maven \nand Java to build and run the \nproject.\n3. It actually contains multiple \nprojects.\nWhat does that mean?  It contains \nmultiple projects.  Read the logical \nnames - they make sense.\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAn Example Project Within\nThe sample java-project.\n8\nItems to note:\n1. This is the key to maven.\n2. It is called a “pom” file.\n3. It is the soup to nuts set of \ndirections on how to build, test, and \nrun the application.\n4. Think of a pom file as the \ncreators of the projects \ncomputationally defining how to \nuse the project to anyone.\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 2. Let’s Explore the java-project  \nHere are some typical things you will see for a mavenized Java project.  \nNote, this will be different for languages like Python or C++.\n1. The mainand testdirectories.\n2. The package structure.\n3. The source Java source code.\n9\nThis is an individual maven project\nHere is its source\nIt is divided into main and tests\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nJava Source Code\nFound in: /maven-examples/java-project/src/main/java/com/mkyong/hashing/\n10\nReasonable - right?\nBut, what about this?  \nIt’s a third party \nlibrary. Thoughts?\nThe pom.xml file will \ncome into play here!\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 3.  Look at the pom.xml\nOur first peek at computationally\ndefining how to use the project.\nNote, a human can read it just as \nwell!  We will!\nBut it’s made to direct and guide a \nmaven - a build automation tool.\nIt is the instruction set, the recipe if \nyou will. \n11\nIt’s Awfully Long!\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 3a. Pom File Project Information Section\n● <modelVersion>: specifies the version of the POM model \nused for the project, in this case, version 4.0.0.  An older \nversion of maven might not be able to handle a newer \nversion of a POM file.\n● <groupId>: specifies the unique identifier of the project's \ngroup or organization. This is typically a reversed domain \nname.  Looks like the package structure!!\n● <artifactId>: specifies the unique identifier of the \nproject's artifact, which is the resulting output of the build \nprocess.  We will see this momentarily!!\n● <packaging>: specifies the type of artifact to be produced, \nin this case, a jar (Java archive) file.\n● <version>: specifies the version of the project's artifact.\n● <name>: specifies the name of the project.\n● <url>: specifies the URL of the project's homepage.\n12\nProject Information Section\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nPom Model Versions\n1. Maven 1.x Project Model: The first version of Maven was released in 2002 and used the Maven 1.x project \nmodel. This model was based on Ant and used an XML -based format for configuration.\n2. Maven 2.x Project Model: In 2005, Maven 2 was released, which introduced a new project model that was \nmore flexible and powerful than the previous version. The Maven 2.x project model is based on a simpler \nXML format called Project Object Model (POM), which contains all the information required to build a \nproject.\n3. Maven 3.x Project Model: Maven 3 was released in 2010 and brought several improvements and new \nfeatures. However, the project model remained the same as the Maven 2.x project model, with only minor \nchanges.\n4. Maven 4.x Project Model: As of May 2023, there is no official release of Maven 4 yet. However, the Maven \ncommunity is actively discussing and working on the next version of Maven, which is expected to bring \nsignificant changes and improvements to the project model.  However, a new version of the project model \nis the standard.  An odd situation where the POM got bumped to 4.0 but there was no complimentary \nMaven release.\nThe example project is using the POM 4.0 - the most current version\n13\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 3b. Project Properties\nPretty straight forward.\nThe source code is encoded as UTF -8\nThe Java compiler is specified.  It is 1.8.  Zylabs uses 1.17. \nThis is critically important.  You can specify and enforce the compiler version used to \nbuild and run the project!  And, Java 17 can compile to Java 8.  \n14\n\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 3c. Dependency Management - Maven’s Superpower! \nDependency management is a critical \ncomponent (maybe the most important?) \nfor pom.  \n● groupId: This element specifies the group or organization \nthat the dependency belongs to. In this case, the group ID \nis commons-codec, which is the ID for the Apache \nCommons Codec project.\n● artifactId: This element specifies the name of the \nlibrary or module being depended on. In this case, the \nartifact ID is also commons-codec, which refers to the \nspecific module within the Apache Commons Codec \nproject.\n● version: This element specifies the version of the \ndependency to be used. In this case, the version is 1.11, \nwhich indicates that version 1.11 of the Apache Commons \nCodec library should be used.\n15\nDependencies Section\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nHow Do Dependencies Work?\nMVN Central - It is literally a \nrepository that holds versions of \nlibraries for Java!\nhttps://central.sonatype.com/artifact/commons-codec/commons-codec\nLook at the commons-codec \npage!\nWho pays for it? Sonatype, a tool \nprovider, via sponsorships and \ndonations.  Internal to a \ncompany you would use Nexus.\n16\nMVN Central Entry for commons-codec\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 3d. Specifying the JAR Target\nThis section of the pom file indicates \nhow to build the target jar file.  \nThe <configuration> block specifies the \nconfiguration options for the plugin. In this case, it \nis specifying that the archive should include the \ndependencies by using the jar-with-\ndependencies descriptor, and the main class for \nthe application should be specified in the manifest \nfile.\nThe <executions> block specifies when the plugin \nshould be executed. In this case, it is configured to \nexecute during the package phase, and the \nattached goal is used to generate a separate \nartifact that includes the dependencies.\n17\n\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWe Are About Ready to Use Maven!\n- Open the Maven Explained Lab\n- It uses the standard Zybooks development environment\n- It’s easier to demo maven with a more console space\n- There are directions at the top for you! \n18\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 4. Build the Project\nHere are the directions to build.  You need to understand \nthe Maven build process as there is a lot here in a few, brief \ncommands!  \nReally, it is just one command to build it: mvn package\n19\n\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nMaven Build Lifecycle\n1. Compile phase: This phase compiles the main source code of the project.  Note, if \nthere are dependencies that are needed - it will go and download them!\n2. Test phase: This phase runs tests on the compiled source code using a testing \nframework such as JUnit.\n3. Package phase: This phase packages the compiled source code and resources \ninto a distributable format such as JAR, WAR, or ZIP.\n4. Install phase: This phase installs the packaged artifact into the local Maven \nrepository, so it can be used as a dependency by other projects on the same \nmachine.\n20\nmvn package calls all these beneath!\nYou can also call them individually if you would like!\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Generated by the Build Process?\nA dependency-reduced-pom.xml is a generated POM file that contains only the \ninformation about the dependencies that are actually used in the project, and \nexcludes any unused dependencies. This is generated by the Maven Dependency \nPlugin and can be used to simplify the build process and reduce the size of the final \nartifact.  It optimizes transitive dependencies!\ntarget - the build process output!  What is expected to be there! \n21\n\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 5.  Look at the targetfolder output\nWow, there is a lot here!\n● classes: This folder contains the compiled class files of your project's main source code.\n● generated-sources: This folder contains any generated source code produced by tools like annotation processors.\n● generated-test-sources: This folder contains any generated source code produced by tools like annotation processors, \nspecifically for your tests.\n● maven-status: This folder contains files that Maven uses to keep track of the state of your project during the build.\n● original-java-project-1.0-SNAPSHOT.jar: This is the original, unmodified JAR file produced by the build.\n● java-project-1.0-SNAPSHOT.jar: This is the final, modified JAR file produced by the build, which includes any \nmodifications like resource filtering or class relocation.\n● surefire-reports: This folder contains the test results generated by the Surefire plugin, including reports and logs.\n● test-classes: This folder contains the compiled class files of your project's test source code.\n22\n\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLook at the SureFire Tests\nRunning the tests because a step in the automated build \nprocess.\nYou will see failures.\nYou will see the output as well, recorded for all time.\n23\n\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThis is Great … But …\nWe specified a dependency.\nWhere did it go?\nIt’s not in the target folder …. So where is it?\nIn your maven repository!\nEach user that runs maven gets one.  You didn’t even know that!  They can \nbe shared if you would like! \n24\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nStep 6. Find the Dependency\ncd  into \n~/.m2/repository/commons-codec/commons-\ncodec/1.11\nThis holds the commons-code repository!\n25\n\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture16.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\n8. Let’s Fail a Test\nYou are GUARANTEED that the project on Wednesday will \nhave a failing test!  It will be easy to fix.  But - it will be \nfailing!\nChange AppTest.java to fail.  I know - we are forcing this to \nbe incorrect!\n26\n\n--------------------------------------------------\n"
}