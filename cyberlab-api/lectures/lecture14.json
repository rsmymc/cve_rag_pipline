{
    "lecture_id": 6,
    "lecture_name": "lecture14",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Object \nOriented Programming\nMarch 12, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Free pie - ask the Math folks.\n- Test 2 - March 26.  In class!\n- Object Oriented Programming\n○ Public versus private methods - why they exist\n○ Overloaded constructors\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUse of Public Class Variables\nLast lecture we reviewed the need for private and public \naccessors on class variables.\nNote, there are other levels but for now (and for 90% of \nwhat you will do) public and private get the job done.\nRemember that NiFi Project.\n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCreated a Script to Search for Public Variables\nBut, I did not write \nthis script.  \nHere is an example \nof the types of \nquestions to ask \nChatGPT.\n5\n\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat Did I Find\nYes, there are!  Not many, but they exist!  1.5M lines of \nJava code - any guesses how many public class variables \nthere are?\n6\n46!\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLet’s Look at the Script Output\nIt’s great - but … how do I know if anything accesses or uses\nthat public variable?\nAt this point - you need to use the IDE.  I will use Intellij -\nyou will do the same in VS Code soon!\nClasses of interest: \nnifi-nar-bundles/nifi-standard-bundle/nifi-standard-\nprocessors/src/main/java/org/apache/nifi/processors/standard/util/XmlSplitterSaxParser.java\nnifi-commons/nifi-repository-\nencryption/src/main/java/org/apache/nifi/repository/encryption/metadata/serialization/SerializableRecordMetadata.java\n7\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Need and Use of Private Methods\nWhat about private methods.\nWhy do we need these?  Does anyone have some \nthoughts?\nLet’s start with a discussion about arrays[].\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nArrays are Great But Limited\nLet’s say you generated some code.  It identifies prime numbers.  And you want to store them \nin a data structure to use later on.  You could use an array\nint[] prime_numbers = new int[]{1000};\nOnce you hit the upper limit of the array, you would need to somehow grow it.  You would \nneed code to do this.\nIt is certainly an issue that can be generalized to many other problems you need to solve.  \nDo you really want to rewrite the code to “somehow grow” an array.  No, no you don’t. \n9\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroducing the MyArrayList (an object wrapper!)\nWe have an array[] and its useful.\nWe need it to be more useful.  \nSo, we wrap it in an object and add the functionality we \nwant.\nThis is exactly what an ArrayListdoes.  We can create a \nrudimentary implementation using MyArrayList.  Look \nat the in-class lab.\n10\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWe Run Into a Problem!\nThat pesky method bumpCapacity()- it should not be \naccessible by just anyone.  It should be private to method \nand managed by the method.\nWe can see why.\n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThis is Actually Done in Java\nprivate void grow(int minCapacity) {\nint oldCapacity = elementData.length;\nint newCapacity = oldCapacity + (oldCapacity >> 1);\nif (newCapacity - minCapacity < 0)\nnewCapacity = minCapacity;\nif (newCapacity - MAX_ARRAY_SIZE > 0)\nnewCapacity = hugeCapacity(minCapacity);\n// minCapacity is usually close to size, so this is a win:\nelementData = Arrays.copyOf(elementData, newCapacity);\n}\nprivate static int hugeCapacity(int minCapacity) {\nif (minCapacity < 0) // overflow\nthrow new OutOfMemoryError();\nreturn (minCapacity > MAX_ARRAY_SIZE) ?\nInteger.MAX_VALUE :\nMAX_ARRAY_SIZE;\n} 12\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverloaded Constructors - Why We Need Them\nLet’s model a class - data from here:\n13\n\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLet’s Build a Class!\nWe will model a \nCompany class.  I think \nwe should have this in \nit.\nWe should pass these \ninto the Constructor.\nLet’s build it out!\n14\n\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nQuickly Run Into a Problem  … Very Quickly\nThose -1’s … and that Unknown.  We need to identify how we \nwant to handle those.  \nUse and overloaded constructor\npublic Company(String name, String location, String hq){...}\npublic Company(String name, String location, String hq, String size){...}\npublic Company(String name, String location, String hq, String size, int founded){...}\n15\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLet’s Actually Create the Java Objects\nWe will implement the different overloaded constructors.\nWe will need to create test cases and define the behavior \nwe want!\n16\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAutoBoxing and UnBoxing\n17\n\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThis Was Not Always a Thing\nAutoboxing and unboxing were introduced in Java 5, which was released in September 2004. These features simplify the \nprocess of converting between primitive types and their corresponding wrapper classes (e.g., int to Integer) by allowing \nautomatic conversion between them. Autoboxing allows you to assign primitive values to wrapper objects, while unboxing \nallows you to extract primitive values from wrapper objects without explicit casting. These features help to reduce code \nverbosity and make Java programming more convenient.  Who thinks of this stuff?\n18\n\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLet’s Look at Person.java- Objects are References\n19\n\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLast Task for Today\nIts PI day.  3.14.  There is free pie someplace on campus - compliments of \nthe Math students.  There is a Java file in the in class assignment.  It has the \nskeleton for what you need to implement.  You need to:\n1. Implement this formula.  You just need a for loop:\n1. Understand how to use APIs!  You have to use BigDecimal and \nHashMap.\n20\n\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture14.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSolution\nMap<Integer, BigDecimal> piValues = new HashMap<>();\nBigDecimal pi = BigDecimal.valueOf(3);\nBigDecimal numerator = BigDecimal.valueOf(4);\nboolean addTerm = true;\nfor (int i = 0; i < iterations; i++) {\nBigDecimal term = numerator.divide(BigDecimal.valueOf((2 * i + 2) * (2 * i + 3) * (2 * i + 4)), MathContext.DECIMAL128);\nif (addTerm) {\npi = pi.add(term);\n} else {\npi = pi.subtract(term);\n}\naddTerm = !addTerm;\npiValues.put(i + 1, pi);\n}\n21\n--------------------------------------------------\n"
}