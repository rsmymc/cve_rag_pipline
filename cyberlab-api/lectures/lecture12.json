{
    "lecture_id": 4,
    "lecture_name": "lecture12",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Object \nOriented Programming\nMarch 5, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- ZyBooks grades in D2L up to date … mostly\n- There are some issues in translating them over.  Do not worry, I \nmanually check each assignment and will reconcile differences.\n- Assignments for next three weeks \n- Reading Assignment 6 - due this Thursday\n- Reading Assignment 7 and Coding Assignment 3 - due next \nThursday (3/14) \n- Lab Project One due March 20th. \n- Today - Object Oriented Programming\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management\nThis is interesting!\nReading Assignment 6\n4/22 - Have it done (or really close)\n10/22 - Started it\n8/22 - No progress\nWhen would have been an ideal\ntime to work on this …\n4\n\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAnyone Taken a Peek at Lab Project One\nThoughts so far?\nAre you getting the tests to pass?\nAny guesses how many folks have started it!\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAlways Budget More Time\n- For example, I teach CYB 600, \nSecure Software Engineering.\n- All these wonderful and terrific \nlabs that worked last year!\n- So, course prep should be easy.\n- However, I dry run the lab for this \nWeds on Mon and get this error.  \n- Took 1.5 hours to solve!  It forced \nme to think creatively and learn \nsomething.\n6\n\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThe Long and Winding Road of Object Oriented Programming\nConference I was just at.  Dialog with a fellow computer scientist.\nMe:  “Ok, I gotta go.  Need to get slides ready for my class.”\nColleague: “Oh, what are they about?”\nMe: “I’m a critical point.  I’m just introducing object oriented programming.”\nColleague:  “What language?”\nMe:  “Java.  I’m worried.  I know students can get through a chapter on object oriented \nprogramming, answer the questions, and still not understand it really.  I am trying to figure \nhow to avoid that.”\nColleague:  “Yeah, good luck!”\nTake a guess what context she used good luck in … but we’ll do it!\n7\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOpen Up In Class Lab 8 \nRead the description of Lab 8 - Implement the grocery bill.\nIt won’t be easy.\nBreak up into teams of 2 or 3.  We will look over the \nsolutions.  You get 10 minutes.\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWell If We Know We’ll Only Ever Have Two Grocery Bills …\n9\nThis is called a UML class diagram.  \nThe Unified Modelling Language.\nYou can create these for free. \nCreate code blueprints\nvariables methods\nclass\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOr We Could Do This …\n10\n\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAnd if We Were Going to Have 100 Bills We Could …\n….Ummmmm …..\n11\n\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWe Need to Invent Some Type of Solution to This Problem!\nOk … well … what should we do?\nTake this approach but using objects that are blueprints\nthat can construct the instances on demand.\n12\n\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is An Object\nLet’s implement one \ntogether.\nFocus on how it \ndiffers from from the \nstatic approach.\nLet’s redo the main \nmethod!\n13\n\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThink of It Like a Blueprint\nDescribing a class as a \"template\" or \"blueprint\" for creating instances is a common \nand accurate way to explain the concept of a class in object-oriented programming \n(OOP).\nWhen you define a class in Java (or any other OOP language), you are essentially \ncreating a blueprint that outlines the structure and behavior of objects that can be \ncreated from that class. This blueprint specifies what attributes (fields) an object of \nthat class will have, as well as what methods (functions) it can perform.\nEach time you create an instance (or object) of that class, you're essentially following \nthe blueprint laid out by the class definition. This instance has its own unique set of \nattributes and can perform actions defined by the class methods.\n14\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nInstantiation\nThis template lets you create as \nmany of these as you would like! \nFrom 1 to infinity!\n15\n\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOne Way to Think About It\nStatic Calls Analogy: Think of static calls as a single, shared checkout counter at the grocery \nstore. Every customer (or bill) goes to the same checkout counter, and the cashier keeps track of \nall the items scanned and the total bill amount. However, this approach has limitations because it's \nlike having only one cashier serving all customers, which can lead to confusion and inefficiency, \nespecially when multiple customers are trying to check out at the same time.\nGroceryBill Class Analogy: Now, imagine the GroceryBill class as a dedicated checkout lane for \neach customer. Each lane (or instance of the GroceryBill class) has its own cashier (or set of \ninstance methods) responsible for scanning items and calculating the total bill amount. Each \ncustomer (or bill) has its own lane and can be processed independently of other customers. This \napproach provides more flexibility and efficiency because each customer has their own checkout \nlane, reducing congestion and allowing for smoother transactions.\n16\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTo Recap\n● Static calls represent a single shared checkout counter, where all customers' items are processed together, leading \nto potential confusion and inefficiency.\n● The GroceryBill class represents dedicated checkout lanes for each customer, providing a more organized and \nefficient checkout process where each customer's items are processed independently.\n17\nStatic Object Oriented\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLast Task for Today\nWhat if I want GroceryBill to do this:\n// ...\n// You need to add\n// snickers, 1.49, 5\n// mountain dew, 2.60, 1\n// Hersheys bar, 0.99, 1\n//\n// And the third element is the quantity.  What should we do?\n18\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUse Objects!\n19\nThese multiple \narrays, they are \nbecoming hard to \nmanage!\nUse more \nObjects!\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture12.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRecap\nObjects\nHave constructors\nHave class fields\nAccessed differently than static methods\nUsed to maintain state (at least one thing they can do!)\n20\n--------------------------------------------------\n"
}