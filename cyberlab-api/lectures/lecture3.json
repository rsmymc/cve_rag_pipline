{
    "lecture_id": 16,
    "lecture_name": "lecture3",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Java\nJanuary 21, 2024\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTime Management \nAssignment 1: \n- 8/19 have completed \n- 7/19 still working\n- 4/19 have not started \nAssignment 2:\n- Assigned!\n3\nAverage: 1:20 \nminutes to complete \n(roughly the same as \nlast year’s class!)\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOverview\n- Recap from Thursday\n- Virtualization and containers\n- Code compilation\n- Refreshes (or introduction) to the command prompt\n- Become familiar with it\n- Perform basic lab exercises\n- Java coding styles\n- How Java works\n- Coding exercises\n4\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLarge Scale Programming\nIts large in every sense - this is just three dimensions!\n5\nAmount of code\nNumber of tools\nNumber of programmers\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThese slides (7-23) provide an introduction to \nLinux/Unix environment.  They were created by \nMarty Stepp, modified by Jessica Miller & Ruth \nAnderson\nhttp://www.cs.washington.edu/391/\n6\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nTech Tuesday: Operating systems\n• What is an OS?  Why have one?\n• What is a Kernel?\n7\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nOperating systems\n• operating system: Manages activities and resources of a computer.\n▪ software that acts as an interface between hardware and user\n▪ provides a layer of abstraction for application developers\n• features provided by an operating system:\n▪ ability to execute programs (and multi-tasking)\n▪ memory management (and virtual memory)\n▪ file systems, disk and network access\n▪ an interface to communicate with hardware\n▪ a user interface (often graphical)\n8\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nUnix\n• brief history:\n▪ Multics (1964) for mainframes\n▪ Unix (1969)\n▪ K&R\n▪ Linus Torvalds and Linux (1992)\n• key Unix ideas:\n▪ written in a high-level language (C)\n▪ virtual memory\n▪ hierarchical file system; \"everything\" is a file\n▪ lots of small programs that work together to solve larger problems\n▪ security, users, access, and groups\n▪ human-readable documentation included\nDr. Del Vecchio remembers this desktop!\n9\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLinux\n• Linux: A kernel for a Unix-like operating system.\n▪ commonly seen/used today in servers, mobile/embedded devices, ...\n• GNU: A \"free software\" implementation of many Unix -like tools\n▪ many GNU tools are distributed with the Linux kernel\n• distribution: A pre-packaged set of Linux software.\n▪ examples: Ubuntu, Fedora\n• key features of Linux:\n▪ open source software: source can be downloaded\n▪ free to use\n▪ constantly being improved/updated by the community\n 10\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhy Learn Linux and the Command Line?\nOn Linux (and UNIX-like systems in general), there’s often less of an “intermediary \nlayer” between you and the OS. Every command you run is like a direct \nconversation with the computer , allowing you to automate tasks, inspect system \nprocesses, and customize your environment precisely as you want .\nIn contrast, many Windows tools emphasize graphical interfaces that can conceal \nthe underlying commands , making it feel as though you’re only operating at the \nsurface level rather than digging deeply into how the OS works. With the Linux \ncommand line, you learn to harness the full power of the operating system —\nwhich is both a great learning experience and a powerful advantage for advanced \nusers.\n11\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLinux Desktop\n• X-windows\n• window managers\n• desktop environments\n▪ Gnome\n▪ KDE\n• How can I try out Linux?\n▪ You can install a virtual engine (like VirtualBox)\n▪ You can use Arduino!\n12\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nThings you can do in Linux\n• Load the course web site in a browser\n• Install and play games\n• Play MP3s\n• Edit photos\n• IM, Skype\n13\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nShell\n• shell: An interactive program that uses user input to manage the \nexecution of other programs. \n▪ A command processor, typically runs in a text window.\n▪ User types commands, the shell runs the commands\n▪ Several different shell programs exist:\n•bash: the default shell program on most Linux/Unix systems\n• We will use bash\n• Other shells: Bourne, csh, tsch\n• Windows uses PowerShell\n• Why should I learn to use a shell when GUIs exist?\n14\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhy use a shell?\n• Why should I learn to use a shell when GUIs exist?\n▪ faster\n▪ work remotely\n▪ programmable\n▪ customizable\n▪ repeatable\nYou will get concrete \nproof on Thursday this \nis the case!\n15\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRoot \nTree \nStructure \n16\n\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nShell commands\n-> pwd\n/usercode\n-> cd csc213\n-> ls\nexample.txt example2.txt example3.txt\n-> ls –l\n-rw-r--r-- 1 zyuser zyuser 0 Jan 22 14:30 example2.txt\n-rw-r--r-- 1 zyuser zyuser 0 Jan 22 14:30 example3.txt\n-rw-r--r-- 1 zyuser zyuser 0 Jan 22 14:30 example.txt\n-> cd ..\n-> man ls\ncommand description\nexit logs out of the shell\nls lists files in a directory\npwd print the current working directory\ncd changes the working directory\nman brings up the manual for a command\n17\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRelative directories\ndirectory description\n. the directory you are in (\"working directory\")\n.. the parent of the working directory\n(../..is grandparent, etc.)\n~ your home directory\n(on many systems, this is /home/username )\n~username username's home directory\n~/Desktop your desktop\n18\n-> ls -al\n-> cd ..\n-> pwd\n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nDirectory commands\n• some commands (cd, exit) are part of the shell (\"builtins\")\n• others (ls, mkdir) are separate programs the shell runs\ncommand description\nls list files in a directory\npwd print the current working directory\ncd changes the working directory\nmkdir create a new directory\nrmdir delete a directory (must be empty)\n19\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nShell commands\n• many accept arguments or parameters\n▪ example: cp(copy) accepts a source and destination file path\n• a program uses 3 streams of information:\n▪ stdin, stdout, stderr  (standard in, out, error)\n• input: comes from user's keyboard\n• output: goes to console\n• errors can also be printed  (by default, sent to console like output)\n• parameters vs. input\n▪ parameters: before Enter is pressed;  sent in by shell\n▪ input: after Enter is pressed;  sent in by user\n20\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nCommand-line arguments\n• most options are a -followed by a letter such as -c\n▪ some are longer words preceded by two -signs, such as --count\n• options can be combined: ls -l -a -r can be  ls -lar\n• many programs accept a --helpor -helpoption to give more information \nabout that command (in addition to manpages)\n▪ or if you run the program with no arguments, it may print help info\n• for many commands that accept a file name argument, if you omit the \nparameter, it will read from standard input (your keyboard)\n21\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nShell/system commands\n• \"man pages\" are a very important way to learn new commands\nman ls\nman man\ncommand description\nman or info get help on a command\nclear clears out the output from the console\nexit exits and logs out of the shell\ncommand description\ndate output the system date\ncal output a text calendar\nuname print information about the current system\n22\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nFile commands\n• caution: the above commands do not prompt for confirmation\n▪ easy to overwrite/delete a file;   this setting can be overridden (how?)\n• Exercise : Copy the content of csc213into file you create and \nname target.\ncommand description\ncp copy a file\nmv move or rename a file\nrm delete a file\ntouch create a new empty file, or\nupdate its last-modified time stamp\n23\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nScripts\nThe last piece of the puzzle.  You can author scripts to run \ncommands.\nFurther, you can wrap the commands in the bash scripting \nlanguage - though it is limited in what it can do.\nExercise: Create a file named dateOutput.sh Add this content \nto it\ndate > date.txt\nRun the script dateOutput.sh\n24\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Java?\nMentioned last week it was compile, and then run.\n25\nJava Development Kit \n(JDK)\nJava Runtime \nEnvironment (JRE)\nJDK\nJRE\nCompile & run Java \napplications\nRun Java \napplications only\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture3.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhere Do I Find The Java Installation?\nExercise 1: Open the second console! From zybooks lab \nprompt type:\n➜which java\n/nix/store/mxv02wbr9dkmk4fv7wrih3bqdk26gq7w -openjdk-17.0.5+8/bin/java\n➜cd /nix/store/mxv02wbr9dkmk4fv7wrih3bqdk26gq7w -openjdk-17.0.5+8/bin/\n➜ls\njar        javadoc   jdb        jhsdb   jmap      jrunscript  jstatd\njarsigner  javap     jdeprscan  jimage  jmod      jshell      keytool\njava   jcmd      jdeps      jinfo   jpackage  jstack      rmiregistry\njavac jconsole  jfr        jlink   jps       jstat       serialver\n26\n--------------------------------------------------\n"
}