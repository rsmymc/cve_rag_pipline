{
    "lecture_id": 12,
    "lecture_name": "lecture2",
    "lecture_content": "Page 1 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 0, 'page_label': '1'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nIntroduction to Java\nJanuary 15, 2025\n1\n--------------------------------------------------\nPage 2 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 1, 'page_label': '2'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nRemember to Record to \nPanopto!\n2\n\n--------------------------------------------------\nPage 3 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 2, 'page_label': '3'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nReading Assignment 1 & Time Management\n- This assignment is due on Tuesday, January 21 at \n11:59PM!\n- Need to see if there are still issues linking to D2L.  One \nstudent brought up an issue.\n- Stats:\n- 6 people have the Zybook\n- 6 people have started the assignment\n3\n--------------------------------------------------\nPage 4 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 3, 'page_label': '4'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat To Expect\nIt’s the first assignment  - it’s easy!\n4\n\n--------------------------------------------------\nPage 5 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 4, 'page_label': '5'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nGoal for Today\nWhy this course?\nVirtual machines\n- What are they\n- Why are they important\nIntroduction to classes and functions\n- javac command and what it does\n- java command and what it does\n- Binary examination of a java executable\nUsing java objects (instances of java classes)\n- Using an editor to create java code\nConcepts to be covered next week\n5\n--------------------------------------------------\nPage 6 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 5, 'page_label': '6'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAcademic World vs The Real World\n6\nSingle \nDeveloper\nWrites a script or piece of \ncode\nGraded and never touched \nagain\n--------------------------------------------------\nPage 7 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 6, 'page_label': '7'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAcademic World vs The Real World\n7\nThousands of \nDevelopers\nWrites a complex and \nadvanced\nSystem\nConsumed by millions for \ndecades\n--------------------------------------------------\nPage 8 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 7, 'page_label': '8'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAn Open Source Example\n8\n\n--------------------------------------------------\nPage 9 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 8, 'page_label': '9'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nLet’s Compile Some Code!\nBut … you need to understand what is going on first!  \nBecause it’s really important to you!\n9\nZyLabs Advanced \nLabs View!\n“In Class Advanced \nZylab Playground”\n--------------------------------------------------\nPage 10 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 9, 'page_label': '10'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Virtualization?\n• Virtualization is a means of managing and \npresenting computer resources without regard to \nphysical layout or location\noHost virtualization is a type of virtualization in which \nan entire operating system environment is simulated\n10\nZyLabs is \nEssentially \nDoing This\nStudent 1\nStudent 2\nStudent 3\n--------------------------------------------------\nPage 11 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 10, 'page_label': '11'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Virtualization?\n• A virtual machine (VM) is a simulated software-based \nemulation of a computer\n• The host system runs a Hypervisor that manages the virtual \noperating systems and supports one or more guest systems\n✔Virtualization is used to consolidate \nmultiple physical servers into VMs\nthat can run on a single physical \ncomputer\n11\n\n--------------------------------------------------\nPage 12 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 11, 'page_label': '12'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Virtualization?\n• Two types of hypervisor:\noType I – run directly on the computer’s \nhardware instead of the underlying OS\noType II – run on the host OS, much like an \napplication\n12\nWhat are those \nracks doing?\n--------------------------------------------------\nPage 13 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 12, 'page_label': '13'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nContainers\n• Similar to virtual machines as they virtualize\n• A container holds only the necessary OS \ncomponents that are needed for that specific \napplication to run\n✔Reduces the necessary hard drive storage space and \nRAM needed\n✔Allows for containers to start \nmore quickly because the \nOS does not have to be started\n13\nWhat Advanced \nZyLabs Actually \nUses!\n--------------------------------------------------\nPage 14 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 13, 'page_label': '14'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAdvantages of Virtualization \n✔New virtual server machines can be made available (host \navailability) and resources can easily be expanded or \ncontracted as needed (host elasticity)\n✔Can reduce costs\noFewer physical computers must be purchased and maintained\n✔Can provide uninterrupted server access to users\noSupports live migration which allows a VM to be moved to a \ndifferent physical computer with no impact to users\n14\n--------------------------------------------------\nPage 15 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 14, 'page_label': '15'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nNow … Back to Code Development\n15\n--------------------------------------------------\nPage 16 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 15, 'page_label': '16'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nFrom Python to Java\n16\nScript A\nPython - run scripts\nScript B Script C\nimport\ncompile\nJava - compiles \nsource code to \nan executable\nJava \nsource \ncode\nJava \nexecutable\nartifact\nNote - running a Python script still \nleads to compiled code - it is just that \nit’s hidden from the user.\n--------------------------------------------------\nPage 17 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 16, 'page_label': '17'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nElements of a HelloWorld Java Program \n17\nVisibility\nPackage\nClass Type\nComment\nFunction\nObject - instance of a \nclass (atypically named)\n--------------------------------------------------\nPage 18 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 17, 'page_label': '18'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nWhat is Happening\n- Let’s use that ZyBooks advanced lab environment and compile \nHelloWorld.java (or whatever we name it)\n18\nJava \nSource .classjavac\n.class \nexecutable java Output: Hello, World!\ncompile \nerror\nJava executable -\nsomething java may \nrun!\njvm - write once run \nanywhere \n--------------------------------------------------\nPage 19 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 18, 'page_label': '19'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nSo … What is Compilation?\nTurns source code into bytecodes and then the Java virtual \nmachine runs it.\nA bunch of stuff with respect to this.  We cannot cover too many \ncomplex topics.\nWe will review it again in the coming weeks.\nBut let’s dip our toe in!\nRun xxdon the .class file:  \n19\n--------------------------------------------------\nPage 20 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 19, 'page_label': '20'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\n20\nHex Content for Compile Java Program\n- Java’s magic word / number..  See here.\n- 00 - Java nop. See here.\n- 37 - Store a long. Which is the major version \nof the class file format.  See here.\n- …\nA better way:\njavap -c -verbose MyClass > \nMyClass.java\n20\n--------------------------------------------------\nPage 21 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 20, 'page_label': '21'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nPrintstream Class\n** The book discusses IDEs - that is a discussion for future lectures.\n21\nSystem.out.println(“Hello, World!”);\nObject instance\nobject.methodName(arguments);\nMethod \nLet’s look at the API!  This \nis the key to everything:\nIndex.html\nSort of unfortunate this is \nthe “Hello world.” for Java \nas its a bit obtuse …\n--------------------------------------------------\nPage 22 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 21, 'page_label': '22'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nString Class & Random Class\nLet’s look at what a String object is and what it can do:\nUsing any old Object:\n22\n“Hello, World”.length();\nSystem.out.println(“Hello, World”.length());\nRandom generator = new Random();\nSystem.out.println(generator.nextInt());\nSystem.out.println(generator.nextInt());\nLet’s look at the API!  Where is \nRandom defined:\nindex.html\n--------------------------------------------------\nPage 23 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 22, 'page_label': '23'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAssignment 2\nWhat to expect in next week’s assignment (Due 1/28 at \n11:59PM)\n23\nJava classes will \njust be imported \nand used - consult \nthe API!  Scanner \ncollects input!\n--------------------------------------------------\nPage 24 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 23, 'page_label': '24'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAssignment 2\n24\nThere are \nspecial words \nthat are part of \nthe Java \ngrammar\nYou will learn about how \n10/0 or 0/0 is represented.\n--------------------------------------------------\nPage 25 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 24, 'page_label': '25'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAssignment 2\n25\nConstants -\nthese are \nimportant.  \nWere these \nreviewed \nbefore?\n\n--------------------------------------------------\nPage 26 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 25, 'page_label': '26'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAssignment 2\n26\nWe will work with modulo in \nclass - its important!\nType conversions - very important!  They can cause pain!\nOh - you will need to know binary!\n\n--------------------------------------------------\nPage 27 Metadata: {'source': '/Users/tylerderkovitz/downloads/lectureFile/Lecture2.pdf', 'page': 26, 'page_label': '27'}\n\nDepartment of\nComputer ScienceCSC 213: Large Scale Programming\nAssignment 2\n27\nWe are going to have to talk \nabout RAM!\nInteger overflow - everything has limits!\nStyle guides & \ndebugging!\n--------------------------------------------------\n"
}